import{r as t,c as n,a,b as e,w as d,F as c,o as l,d as o,p as r,e as i,f as s,t as b,g as u,n as p,h,i as v,j as m}from"./vendor.75ac3985.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))n(t);new MutationObserver((t=>{for(const a of t)if("childList"===a.type)for(const t of a.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&n(t)})).observe(document,{childList:!0,subtree:!0})}function n(t){if(t.ep)return;t.ep=!0;const n=function(t){const n={};return t.integrity&&(n.integrity=t.integrity),t.referrerpolicy&&(n.referrerPolicy=t.referrerpolicy),"use-credentials"===t.crossorigin?n.credentials="include":"anonymous"===t.crossorigin?n.credentials="omit":n.credentials="same-origin",n}(t);fetch(t.href,n)}}();const g={data:()=>({})},f=a("span",{class:"iconfont"},"",-1),x=o("博客/Blog"),y=a("span",{class:"iconfont"},"",-1),w=o("目录/catalogue"),k=a("span",{class:"iconfont"},"",-1),q=o("日历/Calendar"),T=a("span",{class:"iconfont"},"",-1),B=o("课表/Timetable");g.render=function(o,r,i,s,b,u){const p=t("router-link"),h=t("router-view");return l(),n(c,null,[a("ul",null,[a("li",null,[e(p,{to:"/Blog"},{default:d((()=>[f,x])),_:1})]),a("li",null,[e(p,{to:"/Catalogue"},{default:d((()=>[y,w])),_:1})]),a("li",null,[e(p,{to:"/Calendar"},{default:d((()=>[k,q])),_:1})]),a("li",null,[e(p,{to:"/Timetable/1228"},{default:d((()=>[T,B])),_:1})])]),a("article",null,[e(h)])],64)};const C={};r("data-v-0febf544");const P=o("384: C语言流程控制"),S=o("385: C语言数字类型"),M=o("389: C语言结构共用"),H=o("390: C语言地址指针"),_=o("401: Golang环境配置"),N=o("402: Golang数据类型"),A=o("403: Golang变量常量"),I=o("404: Golang运算符号"),D=o("405: Golang流程控制"),V=o("406: Golang数字类型"),j=o("407: Golang字符类型"),L=o("415: Golang函数类型"),G=o("561: Python机器学习"),O=o("600: HTML语义化标签"),W=o("601: HTML语义化标签（基本标签）"),E=o("602: HTML语义化标签（结构标签）"),$=o("606: HTML个性化属性（表单控件）"),z=o("617: HTML地理与地图"),Y=o("621: Canvas绘制线段"),F=o("622: Canvas绘制矩形"),X=o("623: Canvas绘制圆弧"),R=o("624: Canvas绘制文字"),U=o("660: HTML概念与面试题"),J=o("661: CSS选择器(1)"),K=o("662: CSS选择器(2)"),Z=o("663: 块状样式(1)"),Q=o("664: 块状样式(2)"),tt=o("665: 块状样式(3)"),nt=o("666: 布局样式(1)"),at=o("667: 布局样式(2)"),et=o("668: 布局样式(3)"),dt=o("681: 拓展语言(0)"),ct=o("800: 框架绪论"),lt=o("801: Vite 与 Vue-cli"),ot=o("802: 模块化与组件化"),rt=o("803: Vue数据绑定"),it=o("804: Vue事件绑定"),st=o("805: Vue属性样式"),bt=o("806: Vue分支循环"),ut=o("807: Vue组件传参"),pt=o("808: Vue生命周期"),ht=o("826: Vue-Router基本使用"),vt=o("827: Vue-Router动态路由"),mt=o("828: Vue-Router嵌套路由"),gt=o("831: Vuex");i(),C.render=function(c,o,r,i,s,b){const u=t("router-link");return l(),n("ol",null,[a("li",null,[e(u,{to:"/Blog384"},{default:d((()=>[P])),_:1})]),a("li",null,[e(u,{to:"/Blog385"},{default:d((()=>[S])),_:1})]),a("li",null,[e(u,{to:"/Blog389"},{default:d((()=>[M])),_:1})]),a("li",null,[e(u,{to:"/Blog390"},{default:d((()=>[H])),_:1})]),a("li",null,[e(u,{to:"/Blog401"},{default:d((()=>[_])),_:1})]),a("li",null,[e(u,{to:"/Blog402"},{default:d((()=>[N])),_:1})]),a("li",null,[e(u,{to:"/Blog403"},{default:d((()=>[A])),_:1})]),a("li",null,[e(u,{to:"/Blog404"},{default:d((()=>[I])),_:1})]),a("li",null,[e(u,{to:"/Blog405"},{default:d((()=>[D])),_:1})]),a("li",null,[e(u,{to:"/Blog406"},{default:d((()=>[V])),_:1})]),a("li",null,[e(u,{to:"/Blog407"},{default:d((()=>[j])),_:1})]),a("li",null,[e(u,{to:"/Blog415"},{default:d((()=>[L])),_:1})]),a("li",null,[e(u,{to:"/Blog561"},{default:d((()=>[G])),_:1})]),a("li",null,[e(u,{to:"/Blog600"},{default:d((()=>[O])),_:1})]),a("li",null,[e(u,{to:"/Blog601"},{default:d((()=>[W])),_:1})]),a("li",null,[e(u,{to:"/Blog602"},{default:d((()=>[E])),_:1})]),a("li",null,[e(u,{to:"/Blog606"},{default:d((()=>[$])),_:1})]),a("li",null,[e(u,{to:"/Blog617"},{default:d((()=>[z])),_:1})]),a("li",null,[e(u,{to:"/Blog621"},{default:d((()=>[Y])),_:1})]),a("li",null,[e(u,{to:"/Blog622"},{default:d((()=>[F])),_:1})]),a("li",null,[e(u,{to:"/Blog623"},{default:d((()=>[X])),_:1})]),a("li",null,[e(u,{to:"/Blog624"},{default:d((()=>[R])),_:1})]),a("li",null,[e(u,{to:"/Blog660"},{default:d((()=>[U])),_:1})]),a("li",null,[e(u,{to:"/Blog661"},{default:d((()=>[J])),_:1})]),a("li",null,[e(u,{to:"/Blog662"},{default:d((()=>[K])),_:1})]),a("li",null,[e(u,{to:"/Blog663"},{default:d((()=>[Z])),_:1})]),a("li",null,[e(u,{to:"/Blog664"},{default:d((()=>[Q])),_:1})]),a("li",null,[e(u,{to:"/Blog665"},{default:d((()=>[tt])),_:1})]),a("li",null,[e(u,{to:"/Blog666"},{default:d((()=>[nt])),_:1})]),a("li",null,[e(u,{to:"/Blog667"},{default:d((()=>[at])),_:1})]),a("li",null,[e(u,{to:"/Blog668"},{default:d((()=>[et])),_:1})]),a("li",null,[e(u,{to:"/Blog681"},{default:d((()=>[dt])),_:1})]),a("li",null,[e(u,{to:"/Blog800"},{default:d((()=>[ct])),_:1})]),a("li",null,[e(u,{to:"/Blog801"},{default:d((()=>[lt])),_:1})]),a("li",null,[e(u,{to:"/Blog802"},{default:d((()=>[ot])),_:1})]),a("li",null,[e(u,{to:"/Blog803"},{default:d((()=>[rt])),_:1})]),a("li",null,[e(u,{to:"/Blog804"},{default:d((()=>[it])),_:1})]),a("li",null,[e(u,{to:"/Blog805"},{default:d((()=>[st])),_:1})]),a("li",null,[e(u,{to:"/Blog806"},{default:d((()=>[bt])),_:1})]),a("li",null,[e(u,{to:"/Blog807"},{default:d((()=>[ut])),_:1})]),a("li",null,[e(u,{to:"/Blog808"},{default:d((()=>[pt])),_:1})]),a("li",null,[e(u,{to:"/Blog826"},{default:d((()=>[ht])),_:1})]),a("li",null,[e(u,{to:"/Blog827"},{default:d((()=>[vt])),_:1})]),a("li",null,[e(u,{to:"/Blog828"},{default:d((()=>[mt])),_:1})]),a("li",null,[e(u,{to:"/Blog831"},{default:d((()=>[gt])),_:1})])])},C.__scopeId="data-v-0febf544";const ft={};r("data-v-823d673a");const xt=s('<ul data-v-823d673a><li data-v-823d673a><a href="https://github.com/" data-v-823d673a>GitHub</a></li><li data-v-823d673a><a href="https://github.com.cnpmjs.org" data-v-823d673a>GitHub镜像</a></li><li data-v-823d673a><a href="https://gitee.com/" data-v-823d673a>Gitee</a></li><li data-v-823d673a><a href="https://developer.mozilla.org/zh-CN" data-v-823d673a>MDN</a></li><li data-v-823d673a><a href="https://www.csdn.net/" data-v-823d673a>CSDN</a></li><li data-v-823d673a><a href="http://navnav.co/" data-v-823d673a>NavNav</a></li><li data-v-823d673a><a href="https://www.iconfont.cn/" data-v-823d673a>iconfont</a></li><li data-v-823d673a><a href="https://echarts.apache.org/zh/" data-v-823d673a>ECharts</a></li><li data-v-823d673a><a href="https://studygolang.com/" data-v-823d673a>Golang中外社区</a></li><li data-v-823d673a><a href="https://studygolang.com/pkgdoc" data-v-823d673a>Golang中文文档</a></li><li data-v-823d673a><a href="https://www.liwenzhou.com/" data-v-823d673a>李文周Golang博客</a></li><li data-v-823d673a><a href="https://lbsyun.baidu.com/" data-v-823d673a>百度地图</a></li></ul><ul data-v-823d673a><li data-v-823d673a><a href="https://www.w3school.com.cn/tags/html_ref_byfunc.asp" data-v-823d673a>HTML（W3C）</a></li><li data-v-823d673a><a href="https://www.w3school.com.cn/cssref/index.asp#font" data-v-823d673a>CSS（W3C）</a></li><li data-v-823d673a><a href="http://nodejs.cn/" data-v-823d673a>NodeJS</a></li><li data-v-823d673a><a href="https://www.npmjs.com/" data-v-823d673a>Npm官网</a></li><li data-v-823d673a><a href="https://v3.cn.vuejs.org/guide/introduction.html" data-v-823d673a>Vue官网</a></li><li data-v-823d673a><a href="https://cn.vitejs.dev/" data-v-823d673a>Vite官网</a></li><li data-v-823d673a><a href="https://docs.python.org/zh-cn/3/" data-v-823d673a>Python官方文档</a></li><li data-v-823d673a><a href="https://golang.google.cn/" data-v-823d673a>Golang官网</a></li></ul><ul data-v-823d673a><li data-v-823d673a><a href="https://www.baidu.com" data-v-823d673a>百度搜索</a></li><li data-v-823d673a><a href="https://fanyi.baidu.com/" data-v-823d673a>百度翻译</a></li><li data-v-823d673a><a href="http://www.njtech.edu.cn/" data-v-823d673a>南工首页</a></li><li data-v-823d673a><a href="https://www.bilibili.com/" data-v-823d673a>BiliBili</a></li><li data-v-823d673a><a href="https://www.ilovepdf.com/" data-v-823d673a>PDF工具</a></li><li data-v-823d673a><a href="https://www.json.cn/" data-v-823d673a>Json工具</a></li></ul><ul data-v-823d673a><li data-v-823d673a><a href="https://careers.tencent.com/" data-v-823d673a>腾讯招聘（杭州、北京）</a></li><li data-v-823d673a><a href="https://talent.alibaba.com/" data-v-823d673a>阿里招聘（深圳、北京）</a></li><li data-v-823d673a><a href="https://jobs.bytedance.com/campus" data-v-823d673a>字节校招（北上深杭）</a></li><li data-v-823d673a><a href="https://talent.baidu.com/external/baidu/index.html" data-v-823d673a>百度招聘（北上深）</a></li><li data-v-823d673a><a href="https://campus.meituan.com/" data-v-823d673a>美团招聘（北京、上海）</a></li><li data-v-823d673a><a href="https://zhaopin.jd.com/home" data-v-823d673a>京东招聘（南京）</a></li><li data-v-823d673a><a href="https://talent.didiglobal.com/" data-v-823d673a>滴滴招聘（北杭成）</a></li><li data-v-823d673a><a href="https://careers.pinduoduo.com/campus/" data-v-823d673a>拼多多校招（上海）</a></li><li data-v-823d673a><a href="https://zhaopin.kuaishou.cn/recruit/e/#/official/index/" data-v-823d673a>快手招聘（北杭深）</a></li><li data-v-823d673a><a href="https://campus.163.com/app/index" data-v-823d673a>网易校招（杭广北）</a></li><li data-v-823d673a><a href="https://www.bilibili.com/blackboard/campus/activity-campus2019.html" data-v-823d673a>BiBi校招（上海）</a></li><li data-v-823d673a><a href="https://job.ctrip.com/index.html#/" data-v-823d673a>携程招聘（上海）</a></li><li data-v-823d673a><a href="http://campus.ke.com/mobile/" data-v-823d673a>贝壳校招（上海）</a></li><li data-v-823d673a><a href="https://career.sina.com.cn/portal/home" data-v-823d673a>微博招聘（北京）</a></li><li data-v-823d673a><a href="https://careers.iqiyi.com/" data-v-823d673a>爱奇艺招聘（北京）</a></li></ul>',4);i(),ft.render=function(t,n,a,e,d,c){return xt},ft.__scopeId="data-v-823d673a";const yt={data:()=>({months:["January","February","March","April","May","June","July","August","September","October","November","December"],nowTime:new Date}),methods:{formatNum:t=>t>9?t:"0"+t.toString(),getActiveDate(t,n){const a=new Date(this.nowTime.getFullYear(),this.nowTime.getMonth());return a.setDate(a.getDate()-a.getDay()),a.setDate(a.getDate()+7*(t-1)+n-1),[this.formatNum(a.getMonth()+1),this.formatNum(a.getDate())]}}};r("data-v-02ebb2c2");const wt=a("thead",null,[a("tr",null,[a("th",null,"Sun"),o(),a("th",null,"Mon"),o(),a("th",null,"Tue"),o(),a("th",null,"Wed"),o(),a("th",null,"Thu"),o(),a("th",null,"Fri"),o(),a("th",null,"Sat")])],-1),kt=["textContent"];i(),yt.render=function(t,e,d,r,i,s){return l(),n(c,null,[a("h1",null,[o(" ("+b(i.nowTime.getMonth()+1)+") "+b(i.months[i.nowTime.getMonth()])+" "+b(i.nowTime.getFullYear())+" ",1),a("button",{class:"iconfont",onClick:e[0]||(e[0]=t=>i.nowTime.setMonth(i.nowTime.getMonth()-1))},""),a("button",{class:"iconfont",onClick:e[1]||(e[1]=t=>i.nowTime.setMonth(i.nowTime.getMonth()+1))},"")]),a("table",null,[wt,a("tbody",null,[(l(),n(c,null,u(6,(t=>a("tr",{key:"r"+t},[(l(),n(c,null,u(7,(n=>a("td",{key:"d"+t+n,textContent:b(s.getActiveDate(t,n)[0]+"."+s.getActiveDate(t,n)[1]),class:p({avtive:s.getActiveDate(t,n)[0]==i.nowTime.getMonth()+1,today:s.getActiveDate(t,n)[0]==i.nowTime.getMonth()+1&&s.getActiveDate(t,n)[1]==i.nowTime.getDate()})},null,10,kt))),64))]))),64))])])],64)},yt.__scopeId="data-v-02ebb2c2";const qt={data:()=>({termBegins:new Date(2021,7,27,18),nowTime:new Date,mySubjects:[{curriculum:"信息安全技术",schoolHours:[1,1],weekTimes:[7,8,9,10,11,12,13,14,15,16,17,18],classroom:"A306"},{curriculum:"机器学习",schoolHours:[2,1],weekTimes:[10,11,12,13,14,15,16,17],classroom:"厚200"},{curriculum:"最优化方法",schoolHours:[3,1],weekTimes:[5,6,7,8,9,10,11,12,13],classroom:"厚202"},{curriculum:"战略经济学",schoolHours:[4,1],weekTimes:[5,6,7,8,9,10,11,12,13,14,15,16],classroom:"B502"},{curriculum:"数据结构与算法",schoolHours:[2,2],weekTimes:[5,6,7,8,9,10,11,12,13,14,15,16],classroom:"A504"},{curriculum:"毛概",schoolHours:[3,2],weekTimes:[5,6,7,8,9,10,11,12,13,14,15,16],classroom:"A207"},{curriculum:"生物医学工程导论",schoolHours:[4,2],weekTimes:[5,6,7,8,9,10],classroom:"B405"},{curriculum:"人机交互设计",schoolHours:[1,3],weekTimes:[5,6,7,8,9,10,11,12,13,14,15,16,18],classroom:"A306"},{curriculum:"战略经济学",schoolHours:[2,3],weekTimes:[16],classroom:"厚309"},{curriculum:"信息安全技术",schoolHours:[2,3],weekTimes:[7,8,9,10,11,12,13,14,15,17,18],classroom:"A503"},{curriculum:"形势与政策",schoolHours:[5,3],weekTimes:[8,9],classroom:"A501"},{curriculum:"毛概",schoolHours:[2,4],weekTimes:[4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"A309"},{curriculum:"最优化方法",schoolHours:[3,4],weekTimes:[4,5,6,7,8,9,10,11,12,13],classroom:"厚602"},{curriculum:"数据结构与算法",schoolHours:[4,4],weekTimes:[4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"厚205"},{curriculum:"毛概",schoolHours:[1,5],weekTimes:[13,14,15,16],classroom:"厚409"},{curriculum:"机器学习",schoolHours:[3,5],weekTimes:[7,8,9,10,11,12,13,14,15,16,17],classroom:"厚509"},{curriculum:"生物医学工程导论",schoolHours:[4,5],weekTimes:[7,8],classroom:"B405"}],lanSubjects:[{curriculum:"机器学习",schoolHours:[2,1],weekTimes:[10,11,12,13,14,15,16,17],classroom:"厚200"},{curriculum:"最优化方法",schoolHours:[3,1],weekTimes:[4,5,6,7,8,9,10,11,12,13],classroom:"厚202"},{curriculum:"统计计算",schoolHours:[4,1],weekTimes:[4,5,6,7,8,9,10,11,12,13],classroom:"厚303"},{curriculum:"形势与政策",schoolHours:[5,1],weekTimes:[8,9],classroom:"B404"},{curriculum:"应用随机过程",schoolHours:[1,2],weekTimes:[4,5,6,7,8,9,10,11,12,13],classroom:"厚105"},{curriculum:"毛概",schoolHours:[2,2],weekTimes:[4,5,6,8,9,10,11,12,13,14,15,16,17,18,19],classroom:"B302"},{curriculum:"金融学",schoolHours:[4,2],weekTimes:[4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"厚103"},{curriculum:"统计计算",schoolHours:[1,3],weekTimes:[4,5,6,7,8,9,10,11,12,13],classroom:"A305"},{curriculum:"实变函数与泛函分析",schoolHours:[2,3],weekTimes:[4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"A209"},{curriculum:"应用随机过程",schoolHours:[1,4],weekTimes:[3,4,5,6,7,8,9,10,11,12,13],classroom:"同510"},{curriculum:"毛概",schoolHours:[2,4],weekTimes:[3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19],classroom:"同413"},{curriculum:"最优化方法",schoolHours:[3,4],weekTimes:[3,4,5,6,7,8,9,10,11,12,13],classroom:"厚602"},{curriculum:"实变函数与泛函分析",schoolHours:[2,5],weekTimes:[3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"A209"},{curriculum:"机器学习",schoolHours:[3,5],weekTimes:[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],classroom:"厚509"}],danSubjects:[{curriculum:"大学英语",schoolHours:[2,1],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼302"},{curriculum:"有机化学",schoolHours:[3,1],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼306"},{curriculum:"环境工程CAD",schoolHours:[1,2],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"尚能楼211"},{curriculum:"环境工程原理",schoolHours:[2,2],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼107"},{curriculum:"大学物理",schoolHours:[3,2],weekTimes:[1,2,3,4,5,6,7,8,9],classroom:"博文楼107"},{curriculum:"概率论与数理统计",schoolHours:[4,2],weekTimes:[1,2,3,4,5,6,7,8,9,10],classroom:"博文楼307"},{curriculum:"工程力学",schoolHours:[2,3],weekTimes:[2,4,6,8,10,12,14,16],classroom:"博文楼103"},{curriculum:"大学英语",schoolHours:[2,3],weekTimes:[1,3,5,7,9,11,13,15],classroom:"尚能楼411"},{curriculum:"有机化学",schoolHours:[3,3],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼306"},{curriculum:"职业生涯规划",schoolHours:[5,3],weekTimes:[5,6,7,8,9,10],classroom:"立心楼420"},{curriculum:"环境工程原理",schoolHours:[2,4],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼107"},{curriculum:"概率论与数理统计",schoolHours:[3,4],weekTimes:[1,2,3,4,5,6,7,8,9,10],classroom:"博文楼副楼304"},{curriculum:"毛概",schoolHours:[1,5],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼303"},{curriculum:"工程力学",schoolHours:[2,5],weekTimes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],classroom:"博文楼108"},{curriculum:"大学物理",schoolHours:[3,5],weekTimes:[1,2,3,4,5,6,7,8,9],classroom:"博文楼108"}]}),methods:{determine(t,n){if("dan"==this.$route.params.user){for(let a of this.danSubjects)if(t===a.schoolHours[0]&&n===a.schoolHours[1]&&a.weekTimes.includes(this.getWeekTimes))return"<br>"+a.curriculum+"<br>"+a.classroom}else if("1107"==this.$route.params.user){for(let a of this.lanSubjects)if(t===a.schoolHours[0]&&n===a.schoolHours[1]&&a.weekTimes.includes(this.getWeekTimes))return"<br>"+a.curriculum+"<br>"+a.classroom}else for(let a of this.mySubjects)if(t===a.schoolHours[0]&&n===a.schoolHours[1]&&a.weekTimes.includes(this.getWeekTimes))return"<br>"+a.curriculum+"<br>"+a.classroom}},computed:{getWeekTimes(){return Math.ceil((this.nowTime-this.termBegins)/864e5/7)},getMon(){return this.nowTime.setDate(this.nowTime.getDate()+1-this.nowTime.getDay()),this.nowTime.getMonth()+1+"月"+this.nowTime.getDate()+"日"},getTue(){return this.nowTime.setDate(this.nowTime.getDate()+2-this.nowTime.getDay()),this.nowTime.getMonth()+1+"月"+this.nowTime.getDate()+"日"},getWed(){return this.nowTime.setDate(this.nowTime.getDate()+3-this.nowTime.getDay()),this.nowTime.getMonth()+1+"月"+this.nowTime.getDate()+"日"},getThu(){return this.nowTime.setDate(this.nowTime.getDate()+4-this.nowTime.getDay()),this.nowTime.getMonth()+1+"月"+this.nowTime.getDate()+"日"},getFri(){return this.nowTime.setDate(this.nowTime.getDate()+5-this.nowTime.getDay()),this.nowTime.getMonth()+1+"月"+this.nowTime.getDate()+"日"}}};r("data-v-4386500e");const Tt=o("周一Mon "),Bt=a("br",null,null,-1),Ct=o("周二Tue "),Pt=a("br",null,null,-1),St=o("周三Wed "),Mt=a("br",null,null,-1),Ht=o("周四Thu "),_t=a("br",null,null,-1),Nt=o("周五Fri "),At=a("br",null,null,-1),It=["innerHTML"];i(),qt.render=function(t,e,d,r,i,s){return l(),n(c,null,[a("h1",null,[a("span",{class:"iconfont icon-shangyiye",onClick:e[0]||(e[0]=t=>i.nowTime=new Date(this.nowTime.setDate(i.nowTime.getDate()-7)))}),a("cite",null,"第"+b(s.getWeekTimes>9?s.getWeekTimes:"0"+s.getWeekTimes)+"周",1),a("span",{class:"iconfont icon-xiayiye",onClick:e[1]||(e[1]=t=>i.nowTime=new Date(this.nowTime.setDate(i.nowTime.getDate()+7)))})]),a("table",null,[a("thead",null,[a("tr",null,[a("th",null,[Tt,Bt,o(" "+b(s.getMon),1)]),a("th",null,[Ct,Pt,o(" "+b(s.getTue),1)]),a("th",null,[St,Mt,o(" "+b(s.getWed),1)]),a("th",null,[Ht,_t,o(" "+b(s.getThu),1)]),a("th",null,[Nt,At,o(" "+b(s.getFri),1)])])]),a("tbody",null,[(l(),n(c,null,u(5,(t=>a("tr",{key:"r"+t},[(l(),n(c,null,u(5,(n=>a("td",{key:"d"+n,innerHTML:s.determine(t,n)},null,8,It))),64))]))),64))])])],64)},qt.__scopeId="data-v-4386500e";const Dt={},Vt={class:"blogContent"},jt=s("<h1>404：C语言流程控制</h1><hr><h2>if/else 条件判断</h2><pre>#include&lt;stdio.h&gt;\n\nint main() {\n    int year;\n\n    printf(&quot;Please enter the year you want to judge: &quot;);\n    scanf(&quot;%d&quot;, &amp;year);\n\n    if ((year % 400 == 0) || (year % 100 != 0 &amp;&amp; year % 4 == 0)) {\n        printf(&quot;Leap year\\n&quot;);\n    } else {\n        printf(&quot;Average year\\n&quot;);\n    }\n\n    return 0;\n}\n    </pre><hr><h2>switch 条件判断</h2><pre>#include&lt;stdio.h&gt;\n\nint main() {\n    int score;\n\n    printf(&quot;Please enter the score you want to judge(0~100): &quot;);\n    scanf(&quot;%d&quot;, &amp;score);\n\n    switch (score / 10) {\n    case 10:\n    case 9:\n        printf(&quot;Brilliant\\n&quot;);\n        break;\n    case 8:\n        printf(&quot;Fine\\n&quot;);\n        break;\n    case 7:\n        printf(&quot;Normal\\n&quot;);\n        break;\n    case 6:\n        printf(&quot;Qualified\\n&quot;);\n        break;\n    default:\n        printf(&quot;Unqualified\\n&quot;);\n        break;\n    }\n\n    return 0;\n}\n    </pre><hr><h2>while 循环</h2><pre>#include&lt;stdio.h&gt;\n\nint main() {\n    int num = 0;\n\n    while (num &lt; 5) {\n        printf(&quot;%d\\n&quot;,num);\n        num++;\n    }\n    \n    return 0;\n}\n    </pre><hr><h2>do/while 循环</h2><pre>#include&lt;stdio.h&gt;\n\nint main() {\n    int num = 0;\n\n    do {\n        printf(&quot;%d\\n&quot;,num);\n        num++;\n    } while(num &lt; 5);\n    \n    return 0;\n}\n    </pre><hr><h2>for 循环</h2><pre>#include&lt;stdio.h&gt;\n\nint main() {\n    for (int i=0; i&lt;5; i++) {\n        printf(&quot;%d\\n&quot;,i);\n    }\n    \n    return 0;\n} \n    </pre><p>// break;continue</p>",17);Dt.render=function(t,e){return l(),n("section",Vt,[jt,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/403"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/405"))},"点击阅读下一篇")])};const Lt={};r("data-v-3c3682a8");const Gt={class:"blogContent"},Ot=s("<h1 data-v-3c3682a8>405：C语言数据类型</h1><table data-v-3c3682a8><thead data-v-3c3682a8><tr data-v-3c3682a8><th data-v-3c3682a8>数据类型</th> <th data-v-3c3682a8>存储大小</th> <th data-v-3c3682a8>数值范围</th></tr></thead><tbody data-v-3c3682a8><tr data-v-3c3682a8><td data-v-3c3682a8>short</td> <td data-v-3c3682a8>2 bytes</td> <td data-v-3c3682a8>-32768~32767</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>unsigned short</td> <td data-v-3c3682a8>2 bytes</td> <td data-v-3c3682a8>0~65535</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>int</td> <td data-v-3c3682a8>4 bytes</td> <td data-v-3c3682a8>-2147483648~2147483647</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>unsigned int</td> <td data-v-3c3682a8>4 bytes</td> <td data-v-3c3682a8>0~4294967295</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>long</td> <td data-v-3c3682a8>8 bytes</td> <td data-v-3c3682a8>-9223372036854775808~9223372036854775807</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>unsigned long</td> <td data-v-3c3682a8>8 bytes</td> <td data-v-3c3682a8>0~18446744073709551615</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>float</td> <td data-v-3c3682a8>4 bytes</td> <td data-v-3c3682a8>6位有效小数</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>double</td> <td data-v-3c3682a8>8 bytes</td> <td data-v-3c3682a8>15位有效小数</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>char</td> <td data-v-3c3682a8>1 byte</td> <td data-v-3c3682a8>-128~127 or 0~255</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>signed char</td> <td data-v-3c3682a8>1 byte</td> <td data-v-3c3682a8>-128~127</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8>unsigned char</td> <td data-v-3c3682a8>1 byte</td> <td data-v-3c3682a8> 0~255</td></tr><tr data-v-3c3682a8><td data-v-3c3682a8></td> <td data-v-3c3682a8></td> <td data-v-3c3682a8></td></tr></tbody></table><pre data-v-3c3682a8>#include&lt;stdio.h&gt;\n\nint main() {\n    short shortNum = -32768;\n    unsigned short unShortNum = 65535;\n    int intNum = -2147483648;\n    unsigned int unIntNum = 4294967295;\n    long longNum = -9223372036854775808;\n    unsigned long UnLongNum = 18446744073709551615;\n    float floatNum = 3.1415926535897932385;\n    double doubleNum = 3.1415926535897932385;\n    \n    printf(&quot;&#39;017&#39;(%d) is an octal number\\n&quot;,017);\n    printf(&quot;%d is a decimal number\\n&quot;,17);\n    printf(&quot;&#39;0x17&#39;(%d) is a hexadecimal number\\n&quot;,0x17);\n    printf(&quot;&#39;3.14e2&#39;(%f) is a float\\n\\n&quot;,3.14e2);\n\n    printf(&quot;%hd is the minimum of &#39;short&#39;\\n&quot;,shortNum);\n    printf(&quot;%hu is the maximum of &#39;unsigned short&#39;\\n&quot;,unShortNum);\n    printf(&quot;%d is the minimum of &#39;int&#39;\\n&quot;,intNum);\n    printf(&quot;%u is the maximum of &#39;unsigned int&#39;\\n&quot;,unIntNum);\n    printf(&quot;%ld is the minimum of &#39;long&#39;\\n&quot;,longNum);\n    printf(&quot;%lu is the maximum of &#39;unsigned long&#39;\\n&quot;,UnLongNum);\n    printf(&quot;&#39;float&#39; can hold 6 valid decimal places: %.20f\\n&quot;,floatNum);\n    printf(&quot;&#39;double&#39; can hold 15 valid decimal places: %.20f\\n\\n&quot;,doubleNum);\n\n    printf(&quot;&#39;short&#39; takes up %d bytes\\n&quot;,sizeof(shortNum));\n    printf(&quot;&#39;unsigned short&#39; takes up %d bytes\\n&quot;,sizeof(unsigned short));\n    printf(&quot;&#39;int&#39; takes up %d bytes\\n&quot;,sizeof(intNum));\n    printf(&quot;&#39;unsigned int&#39; takes up %d bytes\\n&quot;,sizeof(unsigned int));\n    printf(&quot;&#39;long&#39; takes up %d bytes\\n&quot;,sizeof(longNum));\n    printf(&quot;&#39;unsigned int&#39; takes up %d bytes\\n&quot;,sizeof(unsigned long));\n    printf(&quot;&#39;float&#39; takes up %d bytes\\n&quot;,sizeof(floatNum));\n    printf(&quot;&#39;double&#39; takes up %d bytes\\n&quot;,sizeof(double));\n\n    return 0;\n}\n    </pre>",3);i(),Lt.render=function(t,e){return l(),n("section",Gt,[Ot,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/404"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/406"))},"点击阅读下一篇")])},Lt.__scopeId="data-v-3c3682a8";const Wt={},Et={class:"blogContent"},$t=a("h1",null,"409：C语言结构共用",-1),zt=a("hr",null,null,-1),Yt=a("h2",null,"C语言结构体",-1),Ft=a("pre",null,'#include<stdio.h>\n#include<string.h>\n\nstruct Books {\n    int id;\n    char title[50];\n    char author[50];\n};\n\n\nint main() {\n    struct Books book1;\n\n    book1.id = 128;\n    strcpy(book1.title, "C Programe");\n    strcpy(book1.author, "Yixuan");\n\n    printf("book1 `s id is %d\\n",book1.id);\n    printf("book1 `s title is %s\\n",book1.title);\n    printf("book1 `s author is %s\\n",book1.author);\n\n    return 0;\n} \n    ',-1),Xt=a("hr",null,null,-1),Rt=a("h2",null,null,-1);Wt.render=function(t,e){return l(),n("section",Et,[$t,zt,Yt,Ft,Xt,Rt,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/408"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/410"))},"点击阅读下一篇")])};const Ut={},Jt=[a("h1",null,"410：C语言地址指针",-1),a("pre",null,"#include<stdio.h>\n\nint main() {\n    char charVar = 'a';\n    int intVar = 100;\n    float floatVar = 3.14;\n    double doubleVar = 3.14;\n\n    int *addNull = NULL;\n\n    char *addChar = &charVar;\n    int *addInt = &intVar;\n    float *addFloat = &floatVar;\n    double *addDouble = &doubleVar;\n\n    printf(\"'charVar'的地址是 %p\\n\",&charVar);\n    printf(\"'addChar'保存的地址是 %p\\n\",addChar);\n    printf(\"'addChar'保存地址对应的内容是 %c\\n\",*addChar);\n    printf(\"'addChar'的基类型为'char'，单位跨度为1 byte：%p\\n\",addChar+1);\n\n    printf(\"'intVar'的地址是 %p\\n\",&intVar);\n    printf(\"'addInt'保存的地址是 %p\\n\",addInt);\n    printf(\"'addInt'保存地址对应的内容是 %d\\n\",*addInt);\n    printf(\"'addInt'的基类型为'int'，单位跨度为4 bytes：%p\\n\",addInt+1);\n\n    printf(\"'floatVar'的地址是 %p\\n\",&floatVar);\n    printf(\"'addFloat'保存的地址是 %p\\n\",addFloat);\n    printf(\"'addFloat'保存地址对应的内容是 %f\\n\",*addFloat);\n    printf(\"'addFloat'的基类型为'float'，单位跨度为4 bytes：%p\\n\",addFloat+1);\n\n    printf(\"'doubleVar'的地址是 %p\\n\",&doubleVar);\n    printf(\"'addDouble'保存的地址是 %p\\n\",addDouble);\n    printf(\"'addDouble'保存地址对应的内容是 %lf\\n\",*addDouble);\n    printf(\"'addDouble'的基类型为'double'，单位跨度为8 bytes：%p\\n\",addDouble+1);\n\n    return 0;\n} \n    ",-1)];Ut.render=function(t,a){return l(),n("section",null,Jt)};const Kt={},Zt=s('<h1>Golang环境配置</h1><hr><h2>Golang语言特点</h2><ul style="list-style-type:disc;margin-left:30px;"><li>支持跨平台编译</li><li>执行效率和开发效率高</li><li>语言层面支持并发编程</li><li>可不依赖库直接编译为机器码</li><li>内置runtime支持垃圾回收GC</li><li>反射</li><li>错误处理</li><li>类型和接口</li><li>语言交互性</li><li>函数多返回值</li><li>匿名函数和闭包</li><li>更丰富的内置类型</li></ul><br><hr><h2>Golang应用场景</h2><ul style="list-style-type:disc;margin-left:30px;"><li>云技术</li><li>区块链</li><li>网络编程</li><li>服务器编程</li><li>分布式系统</li><li>内存数据库</li></ul><br><hr><h2>Mac</h2><p>xx.Mac跨平台编译Linux: <code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</code></p><p>xx.Mac跨平台编译Window: <code>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</code></p><br><hr><h2>Linux(deepin)</h2><p>1.<a href="https://golang.google.cn/dl/">Golang官网</a>(https://golang.google.cn/dl/)下载对应操作系统压缩包</p><p>2.路径解压: 执行命令: <code>sudo tar -zxvf goxxx.tar.gz -C /usr/local</code></p><p>3.环境变量: 执行命令: <code>vim ~/.bashrc</code></p><p>    追加内容: <code>export GOROOT=/usr/local/go</code></p><p>    追加内容: <code>export PATH=$PATH:$GOROOT/bin</code></p><p>4.修改配置: 执行命令: <code>go env -w GOPROXY=https://goproxy.cn,direct</code></p><p>5.应用配置: 执行命令: <code>source ~/.bashrc</code></p><p>6.查看版本: 执行命令: <code>go version</code></p><p>7.<a href="https://code.visualstudio.com/">VScode官网</a>(https://code.visualstudio.com/)安装软件</p><p>8.安装插件: Chinese、Go</p><br><p>9.初始化项目: 执行命令: <code>go mod init 项目名称</code></p><p>10.安装依赖: 书写Golang代码时，右下角提示安装插件依赖，选择&quot;install all&quot;</p><p>11.基本命令: <code>go build [fileName] [-o newName]</code> 编译</p><p>        <code>go run [fileName]</code> 运行</p><p>        <code>go install [fileName]</code> 安装</p><p>12.Linux跨平台编译Mac: <code>CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build</code></p><p>      Linux跨平台编译Window: <code>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</code></p><br><hr><h2>Windows</h2><p>xx.Windows跨平台编译Mac: <code>SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build</code></p><p>xx.Windows跨平台编译Linux: <code>SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build</code></p><br>',40),Qt=o("点击阅读下一篇"),tn=a("br",null,null,-1);Kt.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Zt,a("h2",null,[e(i,{to:"/Blog402"},{default:d((()=>[Qt])),_:1})]),tn],64)};const nn={};r("data-v-1755568e");const an=s("<h1 data-v-1755568e>Golang数据类型</h1><table data-v-1755568e><thead data-v-1755568e><tr data-v-1755568e><th data-v-1755568e>类型</th> <th data-v-1755568e>名称</th> <th data-v-1755568e>内存</th> <th data-v-1755568e>说明</th></tr></thead><tbody data-v-1755568e><tr data-v-1755568e><td data-v-1755568e>bool</td> <td data-v-1755568e>布尔类型</td> <td data-v-1755568e>1 Byte</td> <td data-v-1755568e>true or false</td></tr><tr data-v-1755568e><td data-v-1755568e>int8、uint8</td> <td data-v-1755568e>8位整型</td> <td data-v-1755568e>1 Byte</td> <td data-v-1755568e>-128～127、0～255</td></tr><tr data-v-1755568e><td data-v-1755568e>int16、uint16</td> <td data-v-1755568e>16位整型</td> <td data-v-1755568e>2 Byte</td> <td data-v-1755568e>-32768～32767、0～65535</td></tr><tr data-v-1755568e><td data-v-1755568e>int32、uint32</td> <td data-v-1755568e>32位整型</td> <td data-v-1755568e>4 Byte</td> <td data-v-1755568e>-21亿～21亿、0～42亿</td></tr><tr data-v-1755568e><td data-v-1755568e>int64、uint64</td> <td data-v-1755568e>64位整型</td> <td data-v-1755568e>8 Byte</td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e>int、uint</td> <td data-v-1755568e>整数类型</td> <td data-v-1755568e>4/8 Byte</td> <td data-v-1755568e>由操作系统决定int为int32或int64</td></tr><tr data-v-1755568e><td data-v-1755568e>uintptr</td> <td data-v-1755568e>指针整型</td> <td data-v-1755568e>4/8 Byte</td> <td data-v-1755568e>uint别名，用于存放指针地址</td></tr><tr data-v-1755568e><td data-v-1755568e>float32</td> <td data-v-1755568e>32位浮点型</td> <td data-v-1755568e>4 Byte</td> <td data-v-1755568e>7位精确小数位</td></tr><tr data-v-1755568e><td data-v-1755568e>float64</td> <td data-v-1755568e>64位浮点型</td> <td data-v-1755568e>8 Byte</td> <td data-v-1755568e>15位精确小数位</td></tr><tr data-v-1755568e><td data-v-1755568e>complex64</td> <td data-v-1755568e>64位复数</td> <td data-v-1755568e>8 Byte</td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e>complex128</td> <td data-v-1755568e>128位复数</td> <td data-v-1755568e>16 Byte</td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e>byte</td> <td data-v-1755568e>字节类型</td> <td data-v-1755568e>1 Byte</td> <td data-v-1755568e>uint8别名，用于存放英文等简单字符</td></tr><tr data-v-1755568e><td data-v-1755568e>rune</td> <td data-v-1755568e>字符类型</td> <td data-v-1755568e>4 Byte</td> <td data-v-1755568e>uint32别名，用于存放汉字等复杂字符</td></tr><tr data-v-1755568e><td data-v-1755568e>string</td> <td data-v-1755568e>字符串类型</td> <td data-v-1755568e>～</td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td></tr><tr data-v-1755568e><td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td> <td data-v-1755568e></td></tr></tbody></table><br data-v-1755568e>",3),en=o("点击阅读上一篇"),dn=o("点击阅读下一篇"),cn=a("br",null,null,-1);i(),nn.render=function(o,r){const i=t("router-link");return l(),n(c,null,[an,a("h2",null,[e(i,{to:"/Blog401"},{default:d((()=>[en])),_:1})]),a("h2",null,[e(i,{to:"/Blog403"},{default:d((()=>[dn])),_:1})]),cn],64)},nn.__scopeId="data-v-1755568e";const ln={},on=s('<h1>Golang变量常量</h1><hr><h2>Golang变量</h2><pre><span class="notes">// package声明</span>\n<span class="notes">// package main 可独立执行程序</span>\npackage main\n\n<span class="notes">// 导入内置&quot;fmt&quot;包</span>\nimport &quot;fmt&quot;\n\n<span class="notes">// 函数外只能声明标识符(变量、常量、函数)</span>\n<span class="notes">// 全局变量标准声明、多重变量声明及初始化(变量声明的同时赋值)</span>\nvar myAge int\nvar myMath, myEnglish int\nvar myName string = &quot;Yixuan&quot;\n\n<span class="notes">// 全局变量批量声明、多重变量声明及初始化</span>\nvar (\n\tyourAge  int\n\tyourMath, yourEnglish int\n\tyourName string = &quot;NvShen&quot;\n)\n\n<span class="notes">// 程序入口函数</span>\nfunc main() {\n\t<span class="notes">// 未初始化的变量赋值</span>\n\tmyMath = 92\n\tmyEnglish = 68\n\tyourMath = 87\n\tyourEnglish = 96\n\tmyAge = 20\n\tyourAge = 18\n\n\t<span class="notes">// 函数变量初始化(函数变量与全局变量声明方式完全相同，作用域不同)</span>\n\tvar firstStr string = &quot;HelloWorld. &quot;\n\t<span class="notes">// 类型推导变量初始化(可以用于函数外)</span>\n\tvar secondStr = &quot;I love China and you&quot;\n\t<span class="notes">// 类型推导变量初始化简写(只能用于函数内部)</span>\n\tthirdStr := &quot;人生苦短，let us go &quot;\n\n\t<span class="notes">/*\n\t\t这是一个多行注释\n\t\tfmt.Print()   不换行输出\n\t\tfmt.Println() 换行输出\n\t\tfmt.Printf()  格式化输出\n\t*/</span>\n\tfmt.Print(firstStr)\n\tfmt.Println(secondStr)\n\tfmt.Println(&quot;myMath score is &quot;, myMath, &quot;myEnglish score is &quot;, myEnglish)\n\tfmt.Println(&quot;yourMath score is &quot;, yourMath, &quot;yourEnglish score is &quot;, yourEnglish)\n\tfmt.Printf(&quot;Golang座右铭: %s\\n&quot;, thirdStr)\n\tfmt.Printf(&quot;我的名字是%s；你的名字是%s\\n&quot;, myName, yourName)\n\tfmt.Printf(&quot;我今年%d岁；你今年%d岁\\n&quot;, myAge, yourAge)\n}\n    </pre><hr><h2>Golang常量</h2><pre>package main\n\n\nimport &quot;fmt&quot;\n\n<span class="notes">// 全局常量批量、多重初始化</span>\nconst (\n\t<span class="notes">// iota计数器，const中每多一行常量声明，下一个iota会自增</span>\n\tcount1   = iota\n\t<span class="notes">// 当常量声明的值缺省时，默认与上一行值保持一致</span>\n\tNull int = 0\n\tNaN\n\t<span class="notes">// 常量声明数据类型缺省时也可以自动推导类型</span>\n\tPI, E  = 3.1415926, 2.718\n\tcount2 = iota\n\tcount3\n)\n\n<span class="notes">// 定义数量级</span>\nconst (\n\t<span class="notes">// _ 匿名量，不占用内存空间，可重复声明</span>\n\t_  = iota\n\tKB = 1 &lt;&lt; (10 * iota)\n\tMB = 1 &lt;&lt; (10 * iota)\n\tGB = 1 &lt;&lt; (10 * iota)\n\tTB = 1 &lt;&lt; (10 * iota)\n\tPB = 1 &lt;&lt; (10 * iota)\n)\n\n\nfunc main() {\n\tfmt.Println(&quot;空数: &quot;, Null)\n\tfmt.Println(&quot;非数字: &quot;, NaN)\n\tfmt.Println(&quot;圆周率: &quot;, PI)\n\tfmt.Println(&quot;自然底数: &quot;, E)\n\tfmt.Println(&quot;count1: &quot;, count1)\n\tfmt.Println(&quot;count2: &quot;, count2)\n\tfmt.Println(&quot;count3: &quot;, count3)\n\tfmt.Printf(&quot;1KB = %d Byte\\n&quot;, KB)\n\tfmt.Printf(&quot;1MB = %d Byte\\n&quot;, MB)\n\tfmt.Printf(&quot;1GB = %d Byte\\n&quot;, GB)\n\tfmt.Printf(&quot;1TB = %d Byte\\n&quot;, TB)\n\tfmt.Printf(&quot;1PB = %d Byte\\n&quot;, PB)\n}\n\t</pre><br>',8),rn=o("点击阅读上一篇"),sn=o("点击阅读下一篇"),bn=a("br",null,null,-1);ln.render=function(o,r){const i=t("router-link");return l(),n(c,null,[on,a("h2",null,[e(i,{to:"/Blog402"},{default:d((()=>[rn])),_:1})]),a("h2",null,[e(i,{to:"/Blog404"},{default:d((()=>[sn])),_:1})]),bn],64)};const un={},pn=a("h1",null,"Golang运算符号",-1),hn=a("br",null,null,-1),vn=o("点击阅读上一篇"),mn=o("点击阅读下一篇"),gn=a("br",null,null,-1);un.render=function(o,r){const i=t("router-link");return l(),n(c,null,[pn,hn,a("h2",null,[e(i,{to:"/Blog403"},{default:d((()=>[vn])),_:1})]),a("h2",null,[e(i,{to:"/Blog405"},{default:d((()=>[mn])),_:1})]),gn],64)};const fn={},xn=s("<h1>Golang流程控制</h1><hr><h2>bool数据类型</h2><pre>package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n    b1 := true\n    var b2 bool\n\n    fmt.Printf(&quot;b1的值:%t, 数据类型: %T\\n&quot;, b1, b1)\n    fmt.Printf(&quot;b2的值:%t, 数据类型: %T\\n&quot;, b2, b2)\n}\n    </pre><p>Golang中bool类型的默认值为false</p><p>Golang不允许将int强制转换为bool，也不允许将bool强制转换为int，bool也不能参与数字运算</p><br><hr><h2>if/else判断语句</h2><pre>package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tif score := 78; score &gt; 90 {\n\t\tfmt.Println(&quot;优秀&quot;)\n\t} else if score &gt; 80 {\n\t\tfmt.Println(&quot;良好&quot;)\n\t} else if score &gt; 70 {\n\t\tfmt.Println(&quot;中等&quot;)\n\t} else if score &gt; 60 {\n\t\tfmt.Println(&quot;及格&quot;)\n\t} else {\n\t\tfmt.Println(&quot;不及格&quot;)\n\t}\n}\n    </pre><hr><h2>switch判断语句</h2><pre>package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tvar score int\n\tfmt.Printf(&quot;Please input your score:&quot;)\n\tfmt.Scanf(&quot;%d&quot;, &amp;score)\n\n\tswitch score / 10 {\n\tcase 10:\n\t\t// fallthrough执行下条case\n\t\tfallthrough\n\tcase 9:\n\t\tfmt.Println(&quot;优秀&quot;)\n\tcase 8:\n\t\tfmt.Println(&quot;良好&quot;)\n\tcase 7:\n\t\tfmt.Println(&quot;中等&quot;)\n\tcase 6:\n\t\tfmt.Println(&quot;及格&quot;)\n\tcase 5, 4, 3, 2, 1, 0:\n\t\tfmt.Println(&quot;不及格&quot;)\n\tdefault:\n\t\tfmt.Println(&quot;格式错误&quot;)\n\t}\n\n\tswitch {\n\tcase score &gt; 90:\n\t\tfmt.Println(&quot;优秀&quot;)\n\tcase score &gt; 80:\n\t\tfmt.Println(&quot;良好&quot;)\n\tcase score &gt; 70:\n\t\tfmt.Println(&quot;中等&quot;)\n\tcase score &gt; 60:\n\t\tfmt.Println(&quot;及格&quot;)\n\tdefault:\n\t\tfmt.Println(&quot;不及格 or 格式错误&quot;)\n\t}\n}\n    </pre><p>break关键字用以跳过整个循环，可用于for循环、switch判断、select</p><p>continue关键字用以跳过本次循环，可用于for循环</p><hr><h2>for循环语句</h2><pre>------------------------- for循环 -------------------------\npackage main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tfor i := 0; i &lt; 4; i++ {\n\t\tfmt.Println(i)\n\t}\n}\n------------------------- for/range循环 -------------------------\npackage main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tfor index, value := range &quot;Hello翊璇&quot; {\n\t\tfmt.Printf(&quot;%d %c\\n&quot;, index, value)\n\t}\n}\n    </pre><hr><h2>goto跳转</h2><pre>package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tfmt.Println(&quot;first&quot;)\n\n\tif true {\n\t\tgoto End\n\t}\n\n\tfmt.Println(&quot;Second&quot;)\n\nEnd:\n\tfmt.Println(&quot;Third&quot;)\n}\n\n    </pre><br>",22),yn=o("点击阅读上一篇"),wn=o("点击阅读下一篇"),kn=a("br",null,null,-1);fn.render=function(o,r){const i=t("router-link");return l(),n(c,null,[xn,a("h2",null,[e(i,{to:"/Blog404"},{default:d((()=>[yn])),_:1})]),a("h2",null,[e(i,{to:"/Blog406"},{default:d((()=>[wn])),_:1})]),kn],64)};const qn={},Tn=a("h1",null,"Golang数字类型",-1),Bn=a("pre",null,'package main\n\nimport "fmt"\n\nfunc main() {\n\tvar (\n\t\t// 正常定义为十进制\n\t\ti1 int = 12\n\t\t// 以"0"开头定义为八进制数，可用于用户权限\n\t\ti2 int16 = 012\n\t\t// 以"0x"开头定义为十六进制数，可用于内存地址\n\t\ti3 int32 = 0xc\n\t)\n\tvar f1 float32 = 3.1415926\n\tf2 := 3.1415926\n\n\tvar cp1 complex64 = 1.2 + 2.4i\n\tcp2 := 2 + 3i\n\n\tfmt.Printf("十进制的%d表示为二进制: %b\\n", i1, i1)\n\tfmt.Printf("十进制的%d表示为八进制: %o\\n", i1, i1)\n\tfmt.Printf("十进制的%d表示为十六进制: %x\\n", i1, i1)\n\tfmt.Printf("i1变量的数据类型为%T\\n", i1)\n\n\tfmt.Printf("八进制的%o表示为二进制: %b\\n", i2, i2)\n\tfmt.Printf("八进制的%o表示为十进制: %d\\n", i2, i2)\n\tfmt.Printf("八进制的%o表示为十六进制: %x\\n", i2, i2)\n\tfmt.Printf("i2变量的数据类型为%T\\n", i2)\n\n\tfmt.Printf("十六进制的%x表示为二进制: %b\\n", i3, i3)\n\tfmt.Printf("十六进制的%x表示为八进制: %o\\n", i3, i3)\n\tfmt.Printf("十六进制的%x表示为十进制: %d\\n", i3, i3)\n\tfmt.Printf("i3变量的数据类型为%T\\n", i3)\n\n\tfmt.Printf("%f\\n", f1)\n\tfmt.Printf("f1变量的数据类型为%T\\n", f1)\n\tfmt.Printf("%f\\n", f2)\n\tfmt.Printf("f2变量的数据类型为%T\\n", f2)\n\n\tfmt.Printf("cp1:%.1f+%.1fi; cp1实部%.1f; cp1虚部%.1f\\n", real(cp1), imag(cp1), real(cp1), imag(cp1))\n\tfmt.Printf("cp1变量的数据类型为%T\\n", cp1)\n\tfmt.Printf("cp2:%.0f+%.0fi; cp2实部%.0f; cp2虚部%.0f\\n", real(cp2), imag(cp2), real(cp2), imag(cp2))\n\tfmt.Printf("cp2变量的数据类型为%T\\n", cp2)\n}\n    ',-1),Cn=a("br",null,null,-1),Pn=o("点击阅读上一篇"),Sn=o("点击阅读下一篇"),Mn=a("br",null,null,-1);qn.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Tn,Bn,Cn,a("h2",null,[e(i,{to:"/Blog405"},{default:d((()=>[Pn])),_:1})]),a("h2",null,[e(i,{to:"/Blog407"},{default:d((()=>[Sn])),_:1})]),Mn],64)};const Hn={},_n=a("h1",null,"Golang字符类型",-1),Nn=a("pre",null,'------------------------- 字符 -------------------------\npackage main\n\nimport "fmt"\n\nfunc main() {\n\tvar (\n\t\tch1 byte = 97\n\t\tch2 byte = \'a\'\n\t\tch3 byte = 65\n\t\tch4 byte = \'A\'\n\t\tch5 byte = 10\n\t\tch6 byte = \'\\n\'\n\t\tch7 byte = 9\n\t\tch8 byte = \'\\t\'\n\t)\n\tfmt.Printf("the type of ch1 is %T; ch1 ASCII is %d; ch1 unicode is %c;\\n", ch1, ch1, ch1)\n\tfmt.Printf("the type of ch2 is %T; ch2 ASCII is %d; ch2 unicode is %c;\\n", ch2, ch2, ch2)\n\tfmt.Printf("the type of ch3 is %T; ch3 ASCII is %d; ch3 unicode is %c;\\n", ch3, ch3, ch3)\n\tfmt.Printf("the type of ch4 is %T; ch4 ASCII is %d; ch4 unicode is %c;\\n", ch4, ch4, ch4)\n\tfmt.Printf("the type of ch5 is %T; ch5 ASCII is %d; ch5 unicode is %c;\\n", ch5, ch5, ch5)\n\tfmt.Printf("the type of ch6 is %T; ch6 ASCII is %d; ch6 unicode is %c;\\n", ch6, ch6, ch6)\n\tfmt.Printf("the type of ch7 is %T; ch7 ASCII is %d; ch7 unicode is %c;\\n", ch7, ch7, ch7)\n\tfmt.Printf("the type of ch8 is %T; ch8 ASCII is %d; ch8 unicode is %c;\\n", ch8, ch8, ch8)\n}\n\n------------------------- 字符串 -------------------------\npackage main\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\nfunc main() {\n\tvar myStr string = "I love China"\n\tvar myPath string = `/usr/local/go`\n\n\t// 字符串长度\n\tfmt.Println(len(myPath))\n\t// 字符串切片\n\tfmt.Printf("myStr[0]:%c\\n", myStr[0])\n\t// 字符串拼接\n\tfmt.Println(myStr + " and you")\n\t// 字符串分割\n\tfmt.Println(strings.Split(myPath, "/"))\n\t// 字符串检索\n\tfmt.Println(strings.Index(myStr, "o"))\n\t// 字符串检索\n\tfmt.Println(strings.LastIndex(myPath, "o"))\n\t// 字符串构成\n\tfmt.Println(strings.Contains(myStr, "love"))\n\t// 字符串前缀\n\tfmt.Println(strings.HasPrefix(myPath, "/"))\n\t// 字符串后缀\n\tfmt.Println(strings.HasSuffix(myStr, "china"))\n\t// 字符串连接\n\tfmt.Println(strings.Join([]string{"usr", "local", "go"}, "/"))\n}\n    ',-1),An=a("p",null,"1Byte = 8 bit；1KB = 1024 Byte；1MB = 1024 KB；……",-1),In=a("p",null,"英文字符占1Byte；GB2312和GBK编码的汉字字符占2Btye；utf-8编码的汉字字符占3Btye，Golang采用utf-8编码格式",-1),Dn=a("p",null,"常用转义字符：\\n 换行符； \\r 回车符； \\t 制表符； \\' 单引号； \\\" 双引号； \\\\ 反斜线",-1),Vn=a("br",null,null,-1),jn=o("点击阅读上一篇"),Ln=a("br",null,null,-1);Hn.render=function(o,r){const i=t("router-link");return l(),n(c,null,[_n,Nn,An,In,Dn,Vn,a("h2",null,[e(i,{to:"/Blog406"},{default:d((()=>[jn])),_:1})]),Ln],64)};const Gn={},On=s('<h1>Golang函数类型</h1><hr><h2>函数基本使用</h2><pre>package main\n\nimport &quot;fmt&quot;\n\n<span class="notes">// 定义有返回值函数</span>\n<span class="notes">// 使用递归嵌套函数</span>\nfunc Fibonacci(index int64) (num int64) {\n\tif index &lt;= 0 {\n\t\tnum = 0\n\t} else if index &lt;= 2 {\n\t\tnum = 1\n\t} else {\n\t\tnum = Fibonacci(index-1) + Fibonacci(index-2)\n\t}\n\treturn\n}\n\n<span class="notes">// 定义无返回值函数</span>\n<span class="notes">// 使用无定参数函数</span>\nfunc Statistics(subject string, scores ...int16) {\n\t<span class="notes">// 无定参数的传递</span>\n\tvar mean float32 = Cmean(scores...)\n\tvar variance float32 = Cvariance(mean, scores...)\n\tfmt.Printf(&quot;%s的平均分为%f，成绩方差为%f&quot;, subject, mean, variance)\n}\n\nfunc Cmean(scores ...int16) (mean float32) {\n\tfor _, value := range scores {\n\t\tmean += float32(value)\n\t}\n\tmean = mean / float32(len(scores))\n\treturn\n}\n\nfunc Cvariance(mean float32, scores ...int16) (variance float32) {\n\tfor _, value := range scores {\n\t\tvariance += (float32(value) - mean) * (float32(value) - mean)\n\t}\n\treturn\n}\n\nfunc main() {\n    <span class="notes">// 调用有返回值函数时必须定义变量接收返回值，对于不需要的返回值可以使用匿名量丢弃</span>\n\tvar num int64 = Fibonacci(5)\n\tfmt.Println(num)\n\n    <span class="notes">// 调用无返回值函数时不能定义变量接收返回值</span>\n\tStatistics(&quot;Math&quot;, 78, 82, 86)\n}\n    </pre><hr><h2>函数类型使用</h2><pre>package main\n\nimport &quot;fmt&quot;\n\ntype FuncType func(int, int) int\n\nfunc add(a int, b int) (sum int) {\n\tsum = a + b\n\treturn\n}\n\nfunc calculate(a int, b int, calcFun FuncType) (result int) {\n\tresult = calcFun(a, b)\n\treturn\n}\n\nfunc main() {\n\tvar funcTest FuncType = add\n\tvar addNum int = calculate(12, 28, funcTest)\n\tfmt.Println(addNum)\n}\n    </pre>',7);Gn.render=function(t,n){return On};const Wn={},En=a("h1",null,"561: Python机器学习",-1),$n=a("p",null,"机器学习分类：有监督学习；无监督学习；自监督学习；强化学习",-1),zn=a("p",null,"有监督学习: 回归、分类、标注",-1),Yn=a("p",null,"无监督学习: 降维、聚类、密度估计",-1),Fn=a("p",null,"其他机器学习分类: 概率模型和非概率模型",-1),Xn=a("p",null,"其他机器学习分类: 线性模型和非线性模型",-1),Rn=a("p",null,"其他机器学习分类: 参数模型和非参数模型",-1),Un=a("p",null,"机器学习三要素: 模型、策略和算法",-1),Jn=a("br",null,null,-1),Kn=a("br",null,null,-1);Wn.render=function(t,a){return l(),n(c,null,[En,$n,zn,Yn,Fn,Xn,Rn,Un,Jn,Kn],64)};const Zn={};r("data-v-6cdbbc45");const Qn=s('<section class="blogContent" data-v-6cdbbc45></section><h1 data-v-6cdbbc45>801：HTML标签汇总</h1><h2 data-v-6cdbbc45>HTML表格标签</h2><table data-v-6cdbbc45><thead data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></thead><tfoot data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></tfoot><tbody data-v-6cdbbc45><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;table&gt; &lt;/table&gt;</td><td data-v-6cdbbc45>定义表格</td><td data-v-6cdbbc45>table {<br data-v-6cdbbc45>  display:table;<br data-v-6cdbbc45>  <del data-v-6cdbbc45>border-collapse:separateins</del><ins data-v-6cdbbc45>（collapse）</ins>;<br data-v-6cdbbc45>  box-sizing:border-box;<br data-v-6cdbbc45>  <del data-v-6cdbbc45>border-spacing:2px;</del><ins data-v-6cdbbc45>（0px）</ins><br data-v-6cdbbc45>  <del data-v-6cdbbc45>border-color:grey;</del><ins data-v-6cdbbc45>（inherit）</ins><br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;caption&gt; &lt;/caption&gt;</td><td data-v-6cdbbc45>定义表格标题</td><td data-v-6cdbbc45>caption{<br data-v-6cdbbc45>  display:table-caption;<br data-v-6cdbbc45>  text-align:-webkit-center;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;colgroup&gt; &lt;/colgroup&gt;</td><td data-v-6cdbbc45>表格供格式化列组</td><td data-v-6cdbbc45>colgroup{display:table-column-group;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;col&gt;</td><td data-v-6cdbbc45>表格一个或多个属性值</td><td data-v-6cdbbc45>col{display:table-column;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;thead&gt; &lt;/thead&gt;</td><td data-v-6cdbbc45>定义表格头部</td><td data-v-6cdbbc45>thead{<br data-v-6cdbbc45>  display:table-header-group;<br data-v-6cdbbc45>  vertical-align:middle;<br data-v-6cdbbc45>  border-color:inherit;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;tfoot&gt; &lt;/tfoot&gt;</td><td data-v-6cdbbc45>定义表格底部</td><td data-v-6cdbbc45>tfoot{<br data-v-6cdbbc45>  display:table-footer-group;<br data-v-6cdbbc45>  vertical-align:middle;<br data-v-6cdbbc45>  border-color:inherit;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;tbody&gt; &lt;/tbody&gt;</td><td data-v-6cdbbc45>定义表格主体</td><td data-v-6cdbbc45>tbody{<br data-v-6cdbbc45>  display:table-row-group;<br data-v-6cdbbc45>  vertical-align:middle;<br data-v-6cdbbc45>  border-color:inherit;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;tr&gt; &lt;/tr&gt;</td><td data-v-6cdbbc45>定义表格行</td><td data-v-6cdbbc45>tr{<br data-v-6cdbbc45>  display:table-row;<br data-v-6cdbbc45>  vertical-align:inherit;<br data-v-6cdbbc45>  border-color:inherit;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;th&gt; &lt;/th&gt;</td><td data-v-6cdbbc45>定义表格头部单元格</td><td data-v-6cdbbc45>th{<br data-v-6cdbbc45>  display:table-cell;<br data-v-6cdbbc45>  vertical-align:inherit;<br data-v-6cdbbc45>  <del data-v-6cdbbc45>font-weight:bold;</del><ins data-v-6cdbbc45>（normal）</ins><br data-v-6cdbbc45>  <del data-v-6cdbbc45>text-align:-internal-center;</del><ins data-v-6cdbbc45>（inherit）</ins><br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;td&gt; &lt;/td&gt;</td><td data-v-6cdbbc45>定义表格单元格</td><td data-v-6cdbbc45>td{<br data-v-6cdbbc45>  display:table-cell;<br data-v-6cdbbc45>  vertical-align:inherit;<br data-v-6cdbbc45>}</td></tr></tbody></table><br data-v-6cdbbc45><hr data-v-6cdbbc45><h2 data-v-6cdbbc45>HTML表单标签</h2><table data-v-6cdbbc45><thead data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></thead><tfoot data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></tfoot><tbody data-v-6cdbbc45><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;form&gt;&lt;/form&gt;</td><td data-v-6cdbbc45>定义HTML表单</td><td data-v-6cdbbc45>form{display:block;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;fieldset&gt;&lt;/fieldset&gt;</td><td data-v-6cdbbc45>定义围绕表单中元素的边框</td><td data-v-6cdbbc45>fieldset{<br data-v-6cdbbc45>  display:block;<br data-v-6cdbbc45>  margin-inline-start:2px;<br data-v-6cdbbc45>  margin-inline-end:2px;<br data-v-6cdbbc45>  padding-block-start:0.35em;<br data-v-6cdbbc45>  padding-inline-start:0.75em;<br data-v-6cdbbc45>  padding-inline-end:0.75em;<br data-v-6cdbbc45>  padding-block-end:0.625em;<br data-v-6cdbbc45>  min-inline-size:min-content;<br data-v-6cdbbc45>  border-width:2px;<br data-v-6cdbbc45>  border-style:groove;<br data-v-6cdbbc45>  border-color:threedface;<br data-v-6cdbbc45>  border-image:initial;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;legend&gt;&lt;/legend&gt;</td><td data-v-6cdbbc45>定义fieldset元素的标题</td><td data-v-6cdbbc45>legend{<br data-v-6cdbbc45>  display:block;<br data-v-6cdbbc45>  padding-inline-start:2px;<br data-v-6cdbbc45>  padding-inline-end:2px;<br data-v-6cdbbc45>  border-width:initial;<br data-v-6cdbbc45>  border-style:none;<br data-v-6cdbbc45>  border-color:initial;<br data-v-6cdbbc45>  border-image:initial;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;label&gt;&lt;/label&gt;</td><td data-v-6cdbbc45>定义input元素的标注</td><td data-v-6cdbbc45>label{cursor:default;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;input /&gt;</td><td data-v-6cdbbc45>定义输入控件</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;textarea&gt;&lt;/textarea&gt;</td><td data-v-6cdbbc45>定义多行文本输入控件</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;button&gt;&lt;/button&gt;</td><td data-v-6cdbbc45>定义按钮</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;select&gt;&lt;/select&gt;</td><td data-v-6cdbbc45>定义选择列表</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;datalist&gt;&lt;/datalist&gt;</td><td data-v-6cdbbc45>定义下拉列表</td><td data-v-6cdbbc45>datalist{display:none;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;optgroup&gt;&lt;/optgroup&gt;</td><td data-v-6cdbbc45>定义选择列表中相关选项的组合</td><td data-v-6cdbbc45>optgroup{<br data-v-6cdbbc45>  display:block;<br data-v-6cdbbc45>  font-weight:bolder;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;option&gt;&lt;/option&gt;</td><td data-v-6cdbbc45>定义选择列表中的选项</td><td data-v-6cdbbc45>option{<br data-v-6cdbbc45>  display:block;min-height:1.2em;<br data-v-6cdbbc45>  padding:0px 2px 1px;<br data-v-6cdbbc45>  font-weight:normal;<br data-v-6cdbbc45>  white-space:nowrap;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;output&gt;&lt;/output&gt;</td><td data-v-6cdbbc45>定义输出的一些类型</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;progress value=&#39;60&#39; max=&#39;100&#39;&gt;&lt;/progress&gt;</td><td data-v-6cdbbc45>定义任何类型的任务的进度</td><td data-v-6cdbbc45>progress {<br data-v-6cdbbc45>  display:inline-block;<br data-v-6cdbbc45>  box-sizing:border-box;<br data-v-6cdbbc45>  width:10em;<br data-v-6cdbbc45>  height:1em;<br data-v-6cdbbc45>  vertical-align:-0.2em;<br data-v-6cdbbc45>  appearance:auto;<br data-v-6cdbbc45>  -webkit-writing-mode:horizontal-tb !important;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;meter value=&#39;60&#39; min=&#39;1&#39; max=&#39;100&#39;<br data-v-6cdbbc45>low=&#39;60&#39; high=&#39;90&#39; optimum=&#39;80&#39;<br data-v-6cdbbc45>form=&#39;formID&#39;&gt;&lt;/meter&gt;</td><td data-v-6cdbbc45>定义预定义范围内的度量</td><td data-v-6cdbbc45>meter {<br data-v-6cdbbc45>  display:inline-block;<br data-v-6cdbbc45>  box-sizing:border-box;<br data-v-6cdbbc45>  width:5em;<br data-v-6cdbbc45>  height:1em;<br data-v-6cdbbc45>  vertical-align:-0.2em;<br data-v-6cdbbc45>  appearance:auto;<br data-v-6cdbbc45>  -webkit-writing-mode:horizontal-tb;<br data-v-6cdbbc45>  -webkit-user-modify:read-only !important;<br data-v-6cdbbc45>}</td></tr></tbody></table><br data-v-6cdbbc45><hr data-v-6cdbbc45><h2 data-v-6cdbbc45>HTML文本标签</h2><table data-v-6cdbbc45><thead data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></thead><tfoot data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></tfoot><tbody data-v-6cdbbc45><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;em&gt;&lt;/em&gt;</td><td data-v-6cdbbc45>定义强调文本</td><td data-v-6cdbbc45>em {font-style:italic;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;dfn&gt;&lt;/dfn&gt;</td><td data-v-6cdbbc45>定义项目</td><td data-v-6cdbbc45>dfn {font-style:italic;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;var&gt;&lt;/var&gt;</td><td data-v-6cdbbc45>定义程序变量</td><td data-v-6cdbbc45>var {font-style:italic;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;cite&gt;&lt;/cite&gt;</td><td data-v-6cdbbc45>定义引用作者/标题</td><td data-v-6cdbbc45>cite {font-style:italic;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;strong&gt;&lt;/strong&gt;</td><td data-v-6cdbbc45>定义强烈强调文本</td><td data-v-6cdbbc45>strong {font-weight:bold;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;small&gt;&lt;/small&gt;</td><td data-v-6cdbbc45>定义小号文本</td><td data-v-6cdbbc45>small {font-size:smaller;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;sup&gt;&lt;/sup&gt;</td><td data-v-6cdbbc45>定义上标文本</td><td data-v-6cdbbc45>sup {<br data-v-6cdbbc45>  font-size:smaller;<br data-v-6cdbbc45>  vertical-align:super;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;sub&gt;&lt;/sub&gt;</td><td data-v-6cdbbc45>定义下标文本</td><td data-v-6cdbbc45>sub {<br data-v-6cdbbc45>  font-size:smaller;<br data-v-6cdbbc45>  vertical-align:sub;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;kbd&gt;&lt;/kbd&gt;</td><td data-v-6cdbbc45>定义键盘文本</td><td data-v-6cdbbc45>kbd {font-family:monospace;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;code&gt;&lt;/code&gt;</td><td data-v-6cdbbc45>定义代码文本</td><td data-v-6cdbbc45>code {font-family:monospace;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;samp&gt;&lt;/samp&gt;</td><td data-v-6cdbbc45>定义代码样本</td><td data-v-6cdbbc45>samp {font-family:monospace;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;pre&gt;&lt;/pre&gt;</td><td data-v-6cdbbc45>定义预格式文本</td><td data-v-6cdbbc45>pre {<br data-v-6cdbbc45>  display:block;<br data-v-6cdbbc45>  font-family:monospace;<br data-v-6cdbbc45>  white-space:pre;<br data-v-6cdbbc45>  margin:1em 0px;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;ins cite=&#39;url&#39; &gt;&lt;/ins&gt;</td><td data-v-6cdbbc45>定义被插入文本</td><td data-v-6cdbbc45>ins {text-decoration:underline;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;del cite=&#39;url&#39; &gt;&lt;/del&gt;</td><td data-v-6cdbbc45>定义被删除文本</td><td data-v-6cdbbc45>del {text-decoration:line-through;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;abbr title=&#39;全称&#39;&gt;缩写&lt;/abbr&gt;</td><td data-v-6cdbbc45>定义缩写</td><td data-v-6cdbbc45>abbr[title] {text-decoration:underline dotted;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;mark&gt;&lt;/mark&gt;</td><td data-v-6cdbbc45>定义标记文本</td><td data-v-6cdbbc45>mark {<br data-v-6cdbbc45>  background-color:yellow;<br data-v-6cdbbc45>  color:black;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;bdo dir=&#39;rtl&#39;&gt;你是年少的欢喜&lt;/bdo&gt;</td><td data-v-6cdbbc45>定义文字方向</td><td data-v-6cdbbc45>bdo {<br data-v-6cdbbc45>  unicode-bidi:bidi-override;<br data-v-6cdbbc45>  direction:rtl（/ltr）;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;q cite=&#39;url&#39; &gt;&lt;/q&gt;</td><td data-v-6cdbbc45>定义短引用</td><td data-v-6cdbbc45>q {display:inline;}<br data-v-6cdbbc45>q::before{content:open-quote;}<br data-v-6cdbbc45>q::after{content:close-quote;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;blockquote cite=&#39;url&#39; &gt;&lt;/blockquote&gt;</td><td data-v-6cdbbc45>定义长引用</td><td data-v-6cdbbc45>blockquote {<br data-v-6cdbbc45>  display:block;<br data-v-6cdbbc45>  margin-block-start:1em;<br data-v-6cdbbc45>  margin-block-end:1em;<br data-v-6cdbbc45>  margin-inline-start:40px;<br data-v-6cdbbc45>  margin-inline-end:40px;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;bdi&gt;&lt;/bdi&gt;</td><td data-v-6cdbbc45>定义文本的文本方向，使其脱离其周围文本的方向设置</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;data value=&#39;&#39;&gt;&lt;/data&gt;</td><td data-v-6cdbbc45>添加给定内容的机器可读翻译</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;time datetime=&#39;2021-06-01T00:00&#39; pubdate&gt;儿童节&lt;/time&gt;</td><td data-v-6cdbbc45>定义日期/时间</td><td data-v-6cdbbc45>(datetime定义详细时间、pubdate规定时间为发布时间)</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;ruby&gt;&lt;/ruby&gt;</td><td data-v-6cdbbc45>定义注释</td><td data-v-6cdbbc45>ruby {text-indent:0px;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;rt&gt;&lt;/rt&gt;</td><td data-v-6cdbbc45>定义注释的解释</td><td data-v-6cdbbc45>rt {<br data-v-6cdbbc45>  display:block;<br data-v-6cdbbc45>  font-size:50%;<br data-v-6cdbbc45>  text-indent:0px;<br data-v-6cdbbc45>  text-align:start;<br data-v-6cdbbc45>  line-height:normal;<br data-v-6cdbbc45>  -webkit-text-emphasis:none;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;rp&gt;&lt;/rp&gt;</td><td data-v-6cdbbc45>定义若浏览器不支持ruby元素显示的内容</td><td data-v-6cdbbc45>rp {display:none;}</td></tr></tbody></table><p data-v-6cdbbc45>ruby使用案例：&lt;ruby&gt;魑&lt;rt&gt;chī&lt;/rt&gt;魅&lt;rt&gt;mèi&lt;/rt&gt;魍&lt;rt&gt;wǎng&lt;/rt&gt;魉&lt;rt&gt;liǎng&lt;/rt&gt;&lt;/ruby&gt;</p><br data-v-6cdbbc45><hr data-v-6cdbbc45><h1 data-v-6cdbbc45>HTML媒体标签</h1><table data-v-6cdbbc45><thead data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></thead><tfoot data-v-6cdbbc45><tr data-v-6cdbbc45><th data-v-6cdbbc45>标签元素</th> <th data-v-6cdbbc45>元素功能</th> <th data-v-6cdbbc45>默认样式</th></tr></tfoot><tbody data-v-6cdbbc45><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;map&gt;&lt;/map&gt;</td><td data-v-6cdbbc45>定义图像映射</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;area&gt;&lt;/area&gt;</td><td data-v-6cdbbc45>定义图像地图内部的区域</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;canvas&gt;&lt;/canvas&gt;</td><td data-v-6cdbbc45>定义图形</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;svg&gt;&lt;/svg&gt;</td><td data-v-6cdbbc45>定义SVG图形的容器</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;figure&gt;&lt;/figure&gt;</td><td data-v-6cdbbc45>定义媒介内容的分组，以及它们的标题</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;figcaption&gt;&lt;/figcaption&gt;</td><td data-v-6cdbbc45>定义figure元素的标题</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;audio src=&quot;&quot; controls [muted autoplay loop]&gt;&lt;/audio&gt;</td><td data-v-6cdbbc45>定义音频</td><td data-v-6cdbbc45>audio {<br data-v-6cdbbc45>  width: 300px;<br data-v-6cdbbc45>  height: 54px;<br data-v-6cdbbc45>}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;video src=&quot;&quot; controls [poster=&quot;&quot; muted autoplay loop]&gt;&lt;/video&gt;</td><td data-v-6cdbbc45>定义视频</td><td data-v-6cdbbc45>video {object-fit: contain;}</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;source src=&quot;&quot; [type=&quot;&quot; media=&quot;&quot;]&gt;&lt;/source&gt;</td><td data-v-6cdbbc45>定义媒介源</td><td data-v-6cdbbc45>/</td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;track src=&quot;&quot; [label=&quot;&quot; kind=&quot;&quot; srclang=&quot;&quot; default]&gt;&lt;/track&gt;</td><td data-v-6cdbbc45>定义字幕</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;embed src=&quot;&quot; type=&quot;&quot;&gt;&lt;/embed&gt;</td><td data-v-6cdbbc45>定义插件</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;object&gt;&lt;/object&gt;</td><td data-v-6cdbbc45>定义嵌入的对象</td><td data-v-6cdbbc45></td></tr><tr data-v-6cdbbc45><td data-v-6cdbbc45>&lt;param&gt;&lt;/param&gt;</td><td data-v-6cdbbc45>定义对象的参数</td><td data-v-6cdbbc45></td></tr></tbody></table>',17);i(),Zn.render=function(t,n){return Qn},Zn.__scopeId="data-v-6cdbbc45";const ta={};r("data-v-02e5cb5b");const na={class:"blogContent"},aa=[s('<h1 data-v-02e5cb5b>801：HTML基本标签(18)</h1><div class="box" data-v-02e5cb5b><table data-v-02e5cb5b><thead data-v-02e5cb5b><tr data-v-02e5cb5b><th data-v-02e5cb5b>标签元素</th> <th data-v-02e5cb5b>元素功能</th> <th data-v-02e5cb5b>默认样式</th></tr></thead><tfoot data-v-02e5cb5b><tr data-v-02e5cb5b><th data-v-02e5cb5b>标签元素</th> <th data-v-02e5cb5b>元素功能</th> <th data-v-02e5cb5b>默认样式</th></tr></tfoot><tbody data-v-02e5cb5b><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;!DOCTYPE html&gt;</td><td data-v-02e5cb5b>HTML5文档类型声明</td><td data-v-02e5cb5b>/</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;html lang=&#39;zh-CN&#39;&gt; &lt;/html&gt;</td><td data-v-02e5cb5b>定义HTML文档</td><td data-v-02e5cb5b>html {display:block}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;head&gt; &lt;/head&gt;</td><td data-v-02e5cb5b>定义HTML头部</td><td data-v-02e5cb5b>head {display:none}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;body&gt; &lt;/body&gt;</td><td data-v-02e5cb5b>定义HTML主体</td><td data-v-02e5cb5b>body {<br data-v-02e5cb5b>  display: block;<br data-v-02e5cb5b>  <del data-v-02e5cb5b>margin: 8px;</del>（0）<br data-v-02e5cb5b>}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;title&gt; &lt;/title&gt;</td><td data-v-02e5cb5b>定义HTML标题</td><td data-v-02e5cb5b>title {display:none}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;base&gt;</td><td data-v-02e5cb5b>定义HTML默认链接和打开方式</td><td data-v-02e5cb5b>/</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;meta&gt;</td><td data-v-02e5cb5b>定义HTML元信息</td><td data-v-02e5cb5b>meta {display:none}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;script&gt; &lt;/script&gt;</td><td data-v-02e5cb5b>定义客户端脚本</td><td data-v-02e5cb5b>script {display:none}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;link rel=&#39;style<wbr data-v-02e5cb5b>sheet&#39; href=&#39;#&#39;&gt;</td><td data-v-02e5cb5b>定义外部资源</td><td data-v-02e5cb5b>/</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;style&gt; &lt;/style&gt;</td><td data-v-02e5cb5b>定义文档样式信息</td><td data-v-02e5cb5b>style {display:none}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;h1~h6&gt; &lt;/h1~h6&gt;</td><td data-v-02e5cb5b>定义标题</td><td data-v-02e5cb5b>hi {<br data-v-02e5cb5b>  display:block;<br data-v-02e5cb5b>  <del data-v-02e5cb5b>margin-block-start:xx;</del>（0）<br data-v-02e5cb5b>  <del data-v-02e5cb5b>margin-block-end:xx;</del>（0）<br data-v-02e5cb5b>  margin-inline-start: 0;<br data-v-02e5cb5b>  margin-inline-end: 0;<br data-v-02e5cb5b>  <del data-v-02e5cb5b>font-size:xxem;</del>（0）<br data-v-02e5cb5b>  <del data-v-02e5cb5b>font-weight:bold;</del>（0）<br data-v-02e5cb5b>}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;p&gt; &lt;/p&gt;</td><td data-v-02e5cb5b>定义段落</td><td data-v-02e5cb5b>p {<br data-v-02e5cb5b>  display:block;<br data-v-02e5cb5b>  <del data-v-02e5cb5b>margin-block-start:1em;</del>（0）<br data-v-02e5cb5b>  <del data-v-02e5cb5b>margin-block-end:1em;</del>（0）<br data-v-02e5cb5b>  margin-inline-start: 0;<br data-v-02e5cb5b>  margin-inline-end: 0;<br data-v-02e5cb5b>}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;div&gt; &lt;/div&gt;</td><td data-v-02e5cb5b>定义block盒子</td><td data-v-02e5cb5b>div {display:block}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;img src=&quot;&quot;&gt;&lt;/img&gt;</td><td data-v-02e5cb5b>定义图像</td><td data-v-02e5cb5b>/</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;a href=&#39;&#39;&gt;&lt;/a&gt;</td><td data-v-02e5cb5b>定义锚</td><td data-v-02e5cb5b>a {<br data-v-02e5cb5b>  <del data-v-02e5cb5b>color: -webkit-link;</del>（inhert）<br data-v-02e5cb5b>  <del data-v-02e5cb5b>text-decoration: underline;</del>（none）<br data-v-02e5cb5b>  cursor: pointer;<br data-v-02e5cb5b>}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;span&gt;&lt;/span&gt;</td><td data-v-02e5cb5b>定义文档中的节</td><td data-v-02e5cb5b>/</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;hr&gt;</td><td data-v-02e5cb5b>定义水平线</td><td data-v-02e5cb5b>hr {<br data-v-02e5cb5b>  display:block;<br data-v-02e5cb5b>  unicode-bidi:isolate;<br data-v-02e5cb5b>  margin-block-start:0.5em;<br data-v-02e5cb5b>  margin-block-end:0.5em;<br data-v-02e5cb5b>  margin-inline-start:auto;<br data-v-02e5cb5b>  margin-inline-end:auto;<br data-v-02e5cb5b>  overflow:hidden;<br data-v-02e5cb5b>  border-style:inset;<br data-v-02e5cb5b>  border-width:1px;<br data-v-02e5cb5b>}</td></tr><tr data-v-02e5cb5b><td data-v-02e5cb5b>&lt;br&gt;</td><td data-v-02e5cb5b>强制换行</td><td data-v-02e5cb5b>/</td></tr></tbody></table></div>',2)];i(),ta.render=function(t,a){return l(),n("section",na,aa)},ta.__scopeId="data-v-02e5cb5b";const ea={};r("data-v-5dfcc4cb");const da={class:"blogContent"},ca=[s('<h1 data-v-5dfcc4cb>802：HTML结构标签(18)</h1><div class="box" data-v-5dfcc4cb><table data-v-5dfcc4cb><thead data-v-5dfcc4cb><tr data-v-5dfcc4cb><th data-v-5dfcc4cb>标签元素</th> <th data-v-5dfcc4cb>元素功能</th> <th data-v-5dfcc4cb>默认样式</th></tr></thead><tfoot data-v-5dfcc4cb><tr data-v-5dfcc4cb><th data-v-5dfcc4cb>标签元素</th> <th data-v-5dfcc4cb>元素功能</th> <th data-v-5dfcc4cb>默认样式</th></tr></tfoot><tbody data-v-5dfcc4cb><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;mian&gt; &lt;/mian&gt;</td><td data-v-5dfcc4cb>定义文档的主要内容</td><td data-v-5dfcc4cb>main {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;section&gt; &lt;/section&gt;</td><td data-v-5dfcc4cb>定义一个部分</td><td data-v-5dfcc4cb>main {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;header&gt; &lt;/header&gt;</td><td data-v-5dfcc4cb>定义section或页面的页眉</td><td data-v-5dfcc4cb>header {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;footer&gt; &lt;/footer&gt;</td><td data-v-5dfcc4cb>定义section或页面的页脚</td><td data-v-5dfcc4cb>footer {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;article&gt; &lt;/article&gt;</td><td data-v-5dfcc4cb>定义文章</td><td data-v-5dfcc4cb>article {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;aside&gt; &lt;/aside&gt;</td><td data-v-5dfcc4cb>定义页面内容之外的内容</td><td data-v-5dfcc4cb>aside {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;nav&gt; &lt;/nav&gt;</td><td data-v-5dfcc4cb>定义导航链接</td><td data-v-5dfcc4cb>nav {display:block}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;address&gt; &lt;/address&gt;</td><td data-v-5dfcc4cb>定义拥有者的联系信息</td><td data-v-5dfcc4cb>address {<br data-v-5dfcc4cb>  display:block;<br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>font-style:italic;</del>（normal）<br data-v-5dfcc4cb>}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;ol&gt; &lt;/ol&gt;</td><td data-v-5dfcc4cb>定义有序列表</td><td data-v-5dfcc4cb> ol { <br data-v-5dfcc4cb>  display:block; <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>padding-inline-start:40px;</del>（0） <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-block-start:1em;</del>（0） <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-block-end:1em;</del>（0） <br data-v-5dfcc4cb>  margin-inline-start: 0px; <br data-v-5dfcc4cb>  margin-inline-end: 0px; <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>list-style-type:decimal;</del>（none） <br data-v-5dfcc4cb>} </td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;ul&gt;&lt;/ul&gt;</td><td data-v-5dfcc4cb>定义无序列表</td><td data-v-5dfcc4cb> ul { <br data-v-5dfcc4cb>  display:block; <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>padding-inline-start:40px;</del>（0） <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-block-start:1em;</del>（0） <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-block-end:1em;</del>（0） <br data-v-5dfcc4cb>  margin-inline-start: 0px; <br data-v-5dfcc4cb>  margin-inline-end: 0px; <br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>list-style-type:disc;</del>（none） <br data-v-5dfcc4cb>} </td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;li&gt; &lt;/li&gt;</td><td data-v-5dfcc4cb>定义列表内容</td><td data-v-5dfcc4cb> li { <br data-v-5dfcc4cb>  display:list-item; <br data-v-5dfcc4cb>  text-align:-webkit-match-parent; <br data-v-5dfcc4cb>} </td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;dl&gt; &lt;/dl&gt;</td><td data-v-5dfcc4cb>定义自定义列表</td><td data-v-5dfcc4cb>dl {<br data-v-5dfcc4cb>  display:block;<br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-block-start:1em;</del>（0）<br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-block-end:1em;</del>（0）<br data-v-5dfcc4cb>  margin-inline-start: 0px;<br data-v-5dfcc4cb>  margin-inline-end: 0px;<br data-v-5dfcc4cb>}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;dt&gt; &lt;/dt&gt;</td><td data-v-5dfcc4cb>定义自定义列表项目</td><td data-v-5dfcc4cb>dt {display:block;}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;dd&gt; &lt;/dd&gt;</td><td data-v-5dfcc4cb>自定义列表项目描述</td><td data-v-5dfcc4cb>dd {<br data-v-5dfcc4cb>  display:block;<br data-v-5dfcc4cb>  <del data-v-5dfcc4cb>margin-inline-start:40px;</del>（0）<br data-v-5dfcc4cb>}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;details&gt;&lt;/details&gt;</td><td data-v-5dfcc4cb>定义隐藏内容</td><td data-v-5dfcc4cb>details {display:block;}</td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;summary&gt;&lt;/summary&gt;</td><td data-v-5dfcc4cb>定义可见内容（details子元素）</td><td data-v-5dfcc4cb> details[open] &gt; summary:first-of-type {<br data-v-5dfcc4cb>  list-style-type: disclosure-open;<br data-v-5dfcc4cb>} <br data-v-5dfcc4cb> details &gt; summary:first-of-type {<br data-v-5dfcc4cb>  display: list-item;<br data-v-5dfcc4cb>  counter-increment: list-item 0;<br data-v-5dfcc4cb>  list-style: inside disclosure-closed;<br data-v-5dfcc4cb>} </td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;dialog open&gt;&lt;/dialog&gt;</td><td data-v-5dfcc4cb>定义窗口弹窗</td><td data-v-5dfcc4cb> dialog:not([open]) {display: none;} <br data-v-5dfcc4cb> dialog { <br data-v-5dfcc4cb>  display: block; <br data-v-5dfcc4cb>  position: absolute; <br data-v-5dfcc4cb>  left: 0px; <br data-v-5dfcc4cb>  right: 0px; <br data-v-5dfcc4cb>  width: fit-content; <br data-v-5dfcc4cb>  height: fit-content; <br data-v-5dfcc4cb>  padding: 1em; <br data-v-5dfcc4cb>  margin: auto; <br data-v-5dfcc4cb>  border-style: solid; <br data-v-5dfcc4cb>  border-width: initial; <br data-v-5dfcc4cb>  border-color: initial; <br data-v-5dfcc4cb>  border-image: initial; <br data-v-5dfcc4cb>  background: -internal-light-dark(white, black); <br data-v-5dfcc4cb>  color: -internal-light-dark(white, black); <br data-v-5dfcc4cb>} </td></tr><tr data-v-5dfcc4cb><td data-v-5dfcc4cb>&lt;template&gt;&lt;/template&gt;</td><td data-v-5dfcc4cb>定义隐藏模板</td><td data-v-5dfcc4cb>template {display: none;}</td></tr></tbody></table></div><br data-v-5dfcc4cb><hr data-v-5dfcc4cb><h2 data-v-5dfcc4cb>template隐藏模板使用示范</h2><pre data-v-5dfcc4cb>&lt;button onclick=&quot;showContent()&quot;&gt;显示隐藏的内容&lt;/button&gt;\n&lt;template&gt;\n    &lt;h1&gt;header&lt;/h1&gt;\n    &lt;p&gt;paragraph&lt;/p&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    const showContent = () =&gt; {\n        const temp = document.querySelector(&#39;template&#39;)\n        const cont = temp.content.cloneNode(true)\n        document.body.appendChild(cont);\n    }\n&lt;/script&gt;\n    </pre>',6)];i(),ea.render=function(t,a){return l(),n("section",da,ca)},ea.__scopeId="data-v-5dfcc4cb";const la={},oa={class:"blogContent"},ra=[s('<h1>802：HTML属性汇总</h1><hr><br><h2>HTML全局属性</h2><ol><li><h3>accesskey（焦点）</h3><code>范例：&lt;input type=&quot;text&quot; accesskey=&quot;n&quot;&gt;</code><p>// 按下&quot;Alt&quot; + &quot;n&quot;自动焦距</p><input type="text" accesskey="n"></li><li><h3>class（类）</h3><code>范例：&lt;input type=&quot;text&quot; class=&quot;myInputClass&quot;&gt;</code><p>// 绑定类，主要用于添加样式和JavaScript获取元素，可以不同标签设置同样的类</p></li><li><h3>contenteditable（可编辑）</h3><code>范例：&lt;p contenteditable&gt;这是一段可以编辑的文字&lt;/p&gt;</code><p contenteditable style="text-decoration:underline;">这是一段可以编辑的文字</p></li><li><h3>contextmenu（快捷菜单）</h3><p>// 学习中</p></li><li><h3>dir（对齐方式）</h3><code>范例：&lt;p dir=&quot;rtl&quot;&gt;从右向左&lt;/p&gt;</code><br><code>范例：&lt;p dir=&quot;ltr&quot;&gt;从左向右&lt;/p&gt;</code><p dir="rtl">从右向左</p><p dir="ltr">从左向右</p></li><li><h3>druggable（拖拽）</h3><p>// 学习中</p></li><li><h3>dropzone（拖拽）</h3><p>// 学习中</p></li><li><h3>hidden（隐藏）</h3><code>范例：&lt;p hidden&gt;这是一行看不见的文字&lt;/p&gt;</code><p hidden>这是一行看不见的文字</p><p>// 隐藏后的元素不占用标准流的位置，一般用于hover伪元素和JavaScript中</p></li><li><h3>id（ID）</h3><code>范例：&lt;input type=&quot;text&quot; id=&quot;myInputID&quot;&gt;</code><p>// 绑定ID，主要用于添加样式和JavaScript获取元素，一个ID在文档内只能存在一个</p></li><li><h3>lang（语言）</h3><code>范例：&lt;html lang=&quot;zh-CN&quot;&gt; &lt;/html&gt;</code><p>// 用于设置语言类型，&quot;zh-CN&quot;代表汉语，&quot;en&quot;代表英语</p></li><li><h3>spellcheck（拼写检查）</h3><code>&lt;textarea cols=&quot;30&quot; rows=&quot;5&quot; spellcheck=&quot;true&quot;&gt;&lt;/textarea&gt;</code><br><textarea cols="30" rows="5" spellcheck="true"></textarea></li><li><h3>style（样式）</h3><code>范例：&lt;p style=&quot;text-decoration: underline;&quot;&gt;这是一行有下划线的字&lt;/p&gt;</code><p style="text-decoration:underline;">这是一行有下划线的字</p><p>// 一般不采用这种形式，更常用CSS选择器来设置样式，JavaScript中偶尔会用到</p></li><li><h3>tabindex（Tab顺序）</h3><code>案例：&lt;input type=&quot;text&quot; tabindex=&quot;-1&quot;&gt;</code><br><code>案例：&lt;input type=&quot;text&quot; tabindex=&quot;3&quot;&gt;</code><br><code>案例：&lt;input type=&quot;text&quot; tabindex=&quot;1&quot;&gt;</code><br><code>案例：&lt;input type=&quot;text&quot; tabindex=&quot;2&quot;&gt;</code><br><input type="text" tabindex="-1"><input type="text" tabindex="3"><input type="text" tabindex="1"><input type="text" tabindex="2"><p>// tabindex可以改变Tab聚焦的顺序，当tabindex=&quot;负数&quot;时，按下Tab键永远也不会聚焦该元素</p><p>// 当聚焦第3个input元素后按下&quot;Tab&quot;键，会聚焦到第4个input元素上，再按下会聚焦到第2个input元素上</p></li><li><h3>title（信息）</h3><code>范例：&lt;p title=&quot;我没骗你吧&quot;&gt;鼠标悬停一会有字幕&lt;/p&gt;</code><p title="我没骗你吧">鼠标悬停一会有字幕</p><p>// 用于对内容进行说明补充</p></li></ol><hr><h2>单标签</h2><p>meta、base、link、hr、br、wbr、img、col、input、area、keygen、command、embed、param、source、track</p>',8)];la.render=function(t,a){return l(),n("section",oa,ra)};const ia={},sa={class:"blogContent"},ba=[a("h1",null,"百度地图API",-1),a("pre",null,'<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <title>百度地图API</title>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <style>\n        h1 {\n            text-align: center;\n        }\n        a {\n            color: inherit;\n            text-decoration: none;\n        }\n        #map {\n            width: 1280px;\n            height: 800px;\n            margin: 50px auto;\n        }\n    </style>\n</head>\n<body>\n    <h1><a href="https://lbsyun.baidu.com/">百度地图API</a></h1>\n    <div id="map"></div>\n</body>\n</html>\n<script type="text/javascript" src="https://api.map.baidu.com/api?v=1.0&type=webgl&ak=SLj1nbyrGpmVktHnEKLOVtyhhuaqU18B"><\/script>\n<script>\n    // ------------------------- 初始化地图 -------------------------\n    const mapDiv = document.querySelector(\'#map\')\n    // 创建地图实例\n    const map = new BMapGL.Map(\'map\',{\n        // 允许修改旋转角度\n        enableRotate: true,\n        // 允许修改倾斜角度\n        enableTilt: true\n    })\n    // 创建坐标实例\n    const coordinate = new BMapGL.Point(116.404, 39.915)\n    // 初始化地图，设置中心坐标和地图级别（级别越小 可视范围越大 内容越宽泛，级别越大 可视范围越小 内容越精确）\n    map.centerAndZoom(coordinate, 15)\n\n\n\n    // ------------------------- 个性化地图 -------------------------\n    // 开启鼠标滚轮调整地图级别\n    map.enableScrollWheelZoom(true)\n    // 设置地图类型为地球模式\n    // map.setMapType(BMAP_EARTH_MAP)\n    // 设置地图倾斜角度\n    map.setTilt(60)\n    // 设置地图旋转角度\n    map.setHeading(-30)\n\n\n    // ------------------------- 地图控件 -------------------------\n    // 默认左下角添加比例尺\n    map.addControl(new BMapGL.ScaleControl())\n    // 默认右下角添加缩放键(offset设置偏移值)\n    map.addControl(new BMapGL.ZoomControl({offset: new BMapGL.Size(40,40)}))\n    // 默认左下角添加定位\n    map.addControl(new BMapGL.LocationControl())\n    // 默认左上角添加城市\n    map.addControl(new BMapGL.CityListControl())\n<\/script>\n    ',-1)];ia.render=function(t,a){return l(),n("section",sa,ba)};const ua={},pa={class:"blogContent"},ha=a("h1",null,"881：Canvas绘制线段",-1),va=a("pre",null,"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <title>881：Canvas绘制线段</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        canvas {\n            display: block;\n            border: solid 1px #000;\n            margin: 20px auto;\n        }\n    </style>\n</head>\n<body>\n    <canvas width=\"504\" height=\"896\"></canvas>\n</body>\n\n<script>\n// 1.Canvas绘制线段之基本方法\n// 获取canvas标签元素\nlet canvas = document.querySelector('canvas')\n\n// 获取canvas上下文\nlet ctx = canvas.getContext('2d')\n\n// 设置描绘颜色(可缺省，默认'#000')\nctx.strokeStyle = '#f00'\n\n// 设置描绘线宽(可缺省，默认1)(不需要带px单位)\nctx.lineWidth = 5\n\n// 新建路径\nctx.beginPath()\n\n// 将画笔移动到(x1, y1)坐标\nctx.moveTo(50, 50)\n\n// 将画笔线性连接到(x2, y2)坐标\nctx.lineTo(80, 90)\n\n// 闭合路径(可配置)\nctx.closePath()\n\n// 描绘路径\nctx.stroke()\n<\/script>\n\n<script>\n// 2.Canvas绘制线段之折线路径\nctx.strokeStyle = '#0f0'\nctx.beginPath()\nctx.moveTo(150, 50)\nctx.lineTo(180, 90)\n\n// lineTo()方法可多次调用\nctx.lineTo(120, 90)\nctx.stroke()\n<\/script>\n\n<script>\n// 3.Canvas绘制线段之闭合路径\nctx.strokeStyle = '#00f'\nctx.beginPath()\nctx.moveTo(250, 50)\nctx.lineTo(280, 90)\nctx.lineTo(220, 90)\n\n// 闭合路径(可配置)\nctx.closePath()\nctx.stroke()\n<\/script>\n\n<script>\n// 4.Canvas绘制线段之方法封装\nconst drawSolid = (ctx, x1, y1, x2, y2, color='#0f0', width=3) => {\n    ctx.strokeStyle = color\n    ctx.lineWidth   = width\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    ctx.stroke()\n}\n\ndrawSolid(ctx, 350, 50, 380, 90)\ndrawSolid(ctx, 380, 90, 320, 90)\ndrawSolid(ctx, 320, 90, 350, 50)\n<\/script>\n\n<script>\n// 5.Canvas绘制线段之虚线方法\nconst drawDashed = (ctx, x1, y1, x2, y2, step=2, color='#0f0', width=3) => {\n    if (y2 === y1) {\n        const dashedTotal = Math.ceil((x2 - x1) / step)\n        for (let i=0, xOld = x1, xNew; i<Math.abs(dashedTotal)/2+1; i++) {\n            xNew = xOld + step * (x2>x1?1:-1)\n            drawSolid(ctx, xOld, y1, xNew, y1, color=color, width=width)\n            xOld = xNew + step * (x2>x1?1:-1)\n        }\n    } else {\n        const angle = Math.atan2((y2-y1),(x2-x1))\n        const dashedTotal = Math.ceil((y2 - y1) / step)\n        for (let i=0, xOld = x1, yOld = y1, xNew, yNew; i<Math.abs(dashedTotal)/2+1; i++) {\n            xNew = xOld + step * Math.cos(angle)\n            yNew = yOld + step * Math.sin(angle)\n            drawSolid(ctx, xOld, yOld, xNew, yNew, color=color, width=width)\n            xOld = xNew + step * Math.cos(angle)\n            yOld = yNew + step * Math.sin(angle)\n        }\n    }\n}\ndrawDashed(ctx, 450, 50, 480, 90)\ndrawDashed(ctx, 480, 90, 420, 90)\ndrawDashed(ctx, 420, 90, 450, 50)\ndrawDashed(ctx, 490, 50, 490, 90)\n<\/script>\n\n<script>\n// 封装图形函数\nconst drawShap = (context, [fill = true, fillColor = 'transparent', strokeColor = '#000', width = '3'], x0, y0, ...rest) => {\n    if (rest <= 2 || rest.length % 2 != 0) return false\n    context.beginPath()\n    context.moveTo(x0, y0)\n    for (let i = 0, len = rest.length / 2; i < len; i++) {\n        context.lineTo(rest[2 * i], rest[2 * i + 1])\n    }\n    if (fill) {\n        // 闭合路径\n        context.closePath()\n        // 设置填充颜色\n        context.fillStyle = fillColor\n        // 填充路径\n        context.fill()\n    }\n    context.strokeStyle = strokeColor\n    context.lineWidth = width\n    context.stroke()\n}\n<\/script>\n</html>\n    ",-1);ua.render=function(t,e){return l(),n("section",pa,[ha,va,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/882"))},"点击阅读下一篇")])};const ma={},ga={class:"blogContent"},fa=a("h1",null,"882：Canvas绘制矩形",-1),xa=a("pre",null,"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <title>882：Canvas绘制矩形</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        canvas {\n            display: block;\n            border: solid 1px #000;\n            margin: 20px auto;\n        }\n    </style>\n</head>\n<body>\n    <canvas width=\"504\" height=\"896\"></canvas>\n</body>\n\n<script>\n// 1.Canvas绘制矩形之边框矩形\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\n\nctx.strokeStyle = '#0f0'\nctx.lineWidth = 10\n// strokeRect(x, y, width, height)\nctx.strokeRect(10, 10, 480, 80)\n<\/script>\n\n<script>\n// 2.Canvas绘制矩形之填充矩形\n// 设置填充颜色\nctx.fillStyle = 'rgba(0, 0, 0, 0.8)'\n// fillRect(x, y, width, height)\nctx.fillRect(20, 20, 420, 60)\n<\/script>\n\n<script>\n// 3.Canvas绘制矩形之清除矩形\n// clearRect(x, y, width, height)\nctx.clearRect(30, 30, 60, 70)\n<\/script>\n\n<script>\n// 4.Canvas绘制矩形之柱状统计图\n// 4.1.绘制坐标轴\nconst drawAxis = (ctx, originX, originY, XMax, YMax) => {\n    ctx.strokeStyle = '#000'\n    ctx.lineWidth = 1\n    ctx.beginPath()\n    ctx.moveTo(originX + XMax, originY)\n    ctx.lineTo(originX, originY)\n    ctx.lineTo(originX, originY - YMax)\n    ctx.stroke()\n    return {ctx, originX, originY, XMax, YMax}\n}\nconst axis = drawAxis(ctx, 50, 300, 450, 200)\n\n// 4.2.绘制柱状统计图\nconst drawColumnar = (axis, dataArray, minWidth=10, maxWidth=50) => {\n    let columnarWidth = axis.XMax / (2 *dataArray.length + 1)\n    if (columnarWidth < minWidth) return false\n    if (columnarWidth > maxWidth) columnarWidth = maxWidth\n    \n    dataArray.forEach((data,index) => {\n        axis.ctx.fillStyle = '#' + parseInt(Math.random()*0xfff).toString(16)\n        axis.ctx.fillRect(axis.originX+(2*index+1)*columnarWidth, axis.originY-data, columnarWidth, data)\n    });\n}\n\nconst dataArray = []\nfor (let i=0; i<10; i++) {\n    dataArray.push(Math.random()*200)\n}\n\ndrawColumnar(axis, dataArray)\n<\/script>\n</html>\n    ",-1);ma.render=function(t,e){return l(),n("section",ga,[fa,xa,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/881"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/883"))},"点击阅读下一篇")])};const ya={},wa={class:"blogContent"},ka=a("h1",null,"883：Canvas绘制圆弧",-1),qa=a("pre",null,"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <title>883：Canvas绘制圆弧</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        canvas {\n            display: block;\n            border: solid 1px #000;\n            margin: 20px auto;\n        }\n    </style>\n</head>\n<body>\n    <canvas width=\"504\" height=\"896\"></canvas>\n</body>\n\n<script>\n// 1.Canvas绘制圆弧之基本方法\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\n\nctx.strokeStyle = '#0f0'\nctx.lineWidth = 3\nctx.beginPath()\n\n// arc(x, y, r, beginDegree, endDegree [,counterclockwise])\nctx.arc(50, 50, 40, 0, Math.PI/3)\nctx.stroke()\n<\/script>\n\n<script>\n// 2.Canvas绘制圆弧之逆时针绘制\nctx.beginPath()\nctx.arc(150, 50, 40, 0, Math.PI/3, true)\nctx.stroke()\n<\/script>\n\n<script>\n// 3.Canvas绘制圆弧之封闭圆弧\nctx.beginPath()\nctx.arc(250, 50, 40, 0, Math.PI/3, true)\nctx.closePath()\nctx.stroke()\n<\/script>\n\n<script>\n// 4.Canvas绘制圆弧之填充圆弧\nctx.fillStyle = '#ff0'\nctx.beginPath()\nctx.arc(350, 50, 40, 0, Math.PI/3, true)\nctx.fill()\n<\/script>\n\n<script>\n// 5.Canvas绘制圆弧之绘同心圆\nctx.beginPath()\nctx.arc(450, 50, 35, 0, Math.PI*2)\nctx.stroke()\n\nctx.beginPath()\nctx.arc(450, 50, 45, 0, Math.PI*2)\nctx.stroke()\n<\/script>\n\n<script>\n// 6.Canvas绘制圆弧之进度图\nconst drawProgress = (ctx, originX, originY, radius, progress, allTime = 3) => {\n    ctx.strokeStyle = '#888'\n    ctx.lineWidth = 10\n    ctx.beginPath()\n    ctx.arc(originX, originY, radius, 0, Math.PI*2)\n    ctx.stroke()\n\n    ctx.strokeStyle = '#f00'\n    let count = 0\n    let myInter = setInterval(() => {\n        count++\n        ctx.beginPath()\n        ctx.arc(originX, originY, radius, -Math.PI/2, Math.PI*2*count*progress/100/allTime/10-Math.PI/2)\n        ctx.stroke()\n        if (count == allTime*10) clearInterval(myInter)\n    }, 100);\n}\ndrawProgress(ctx, 100, 200, 90, 72)\n<\/script>\n\n<script>\n// 7.Canvas绘制圆弧之扇形统计图\nconst drawSector = (ctx, originX, originY, radius, dataArray) => {\n    const total = dataArray.reduce((x,y) => x+y, 0)\n    let accumulation = 0\n    dataArray.forEach((data,index) => {\n        ctx.fillStyle = '#' + parseInt(Math.random()*0xfff).toString(16)\n        ctx.beginPath()\n        ctx.arc(originX, originY, radius, Math.PI*2*accumulation/total-Math.PI/2, Math.PI*2*(data+accumulation)/total-Math.PI/2)\n        ctx.lineTo(originX, originY)\n        ctx.fill()\n        accumulation += data\n    })\n}\nconst dataArray = [24, 30, 46] \ndrawSector(ctx, 300, 200, 90, dataArray)\n<\/script>\n\n<script>\n// 8.Canvas绘制圆弧之碰撞检测\nconst drawCollisionBox = (ctx, x, y, width, height, sX, sY, radius=5, vX=9, vY=12) => {\n    // 1.绘制墙体\n    ctx.strokeStyle = '#f00'\n    ctx.lineWidth = 1\n    ctx.strokeRect(x, y, width, height)\n\n    let positionX = sX\n    let positionY = sY\n    let speedX = vX\n    let speedY = vY\n\n    const myInter = setInterval(() => {\n        ctx.clearRect(x, y, width, height)\n        ctx.beginPath()\n        ctx.arc(positionX, positionY, radius, 0, Math.PI*2)\n        ctx.fill()\n        positionX += speedX\n        positionY += speedY\n        if (positionX <= x+radius+Math.abs(vX) || positionX >= x+width-radius-Math.abs(vX)) {\n            speedX = -speedX\n        }\n        if (positionY <= y+radius+Math.abs(vY) || positionY >= y+height-radius-Math.abs(vY)) {\n            speedY = -speedY\n        }\n    }, 50);\n}\ndrawCollisionBox(ctx, 0, 300, 500, 300, 120, 360)\n<\/script>\n</html>\n    ",-1);ya.render=function(t,e){return l(),n("section",wa,[ka,qa,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/882"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/884"))},"点击阅读下一篇")])};const Ta={},Ba={class:"blogContent"},Ca=a("h1",null,"884：Canvas绘制文字",-1),Pa=a("pre",null,"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <title>884：Canvas绘制文字</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        canvas {\n            display: block;\n            border: solid 1px #000;\n            margin: 20px auto;\n        }\n    </style>\n</head>\n<body>\n    <canvas width=\"504\" height=\"896\"></canvas>\n</body>\n\n<script>\n// 1.Canvas绘制文字之描绘文字\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\n\nctx.font = 'normal normal bold 30px/30px serif'\nctx.strokeStyle = '#00f'\n// strokeText(string, x, y, maxWidth)\nctx.strokeText('Hello', 100, 100)\n<\/script>\n\n<script>\n// 2.Canvas绘制文字之填充文字\nctx.font = 'italic small-caps bold 30px/30px serif'\nctx.fillStyle = '#0f0'\n// fillText(string, x, y, maxWidth)\nctx.fillText('World', 100, 130)\n<\/script>\n\n<script>\n// 3.Canvas绘制文字之渐变颜色\n// createLinearGradient(startX,startY, endX, endY)\nconst gradient = ctx.createLinearGradient(0, 0, canvas.width, 0)\n// 添加中间颜色\ngradient.addColorStop('0' , '#f00')\ngradient.addColorStop('.5', '#0f0')\ngradient.addColorStop('1' , '#00f')\n\nctx.strokeStyle = gradient\nctx.strokeText('Hello World', 100, 200)\nctx.fillStyle = gradient\nctx.fillText('I love China and you', 100, 230)\n<\/script>\n\n<script>\n// 4.Canvas绘制文字之文字位置\nctx.beginPath()\nctx.moveTo(canvas.width/2, 0)\nctx.lineTo(canvas.width/2, canvas.height)\nctx.stroke()\nctx.beginPath()\nctx.moveTo(0, canvas.height/2)\nctx.lineTo(canvas.width, canvas.height/2)\nctx.stroke()\n// textAlign = 'left'(默认) 'center' 'right'\nctx.textAlign = 'center'\n// textBaseline = 'top' 'middle' 'bottom'(默认)\nctx.textBaseline = 'middle'\nctx.strokeText('Hello', canvas.width/2, canvas.height/2)\n<\/script>\n</html>\n    ",-1);Ta.render=function(t,e){return l(),n("section",Ba,[Ca,Pa,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/883"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/885"))},"点击阅读下一篇")])};const Sa={},Ma={class:"blogContent"},Ha=[s("<h1>HTML概念与面试题</h1><p>HTML(Hyper Text Markup Language)超文本标记语言是用来描述网页的一种语言</p><p>常见的前端开发工具：Dreamweaver、SublimeText、WebStorm、HBuilder、VScode</p><p>浏览器是网页显示、运行的平台，常用的浏览器有谷歌（Chrome）、火狐（Firefox）、Safari和Opera</p><p>浏览器内核(Rendering Engine)，也叫排版引擎、解释引擎、渲染引擎，负责读取网页内容，整理讯息，计算网页的显示方式并显示页面</p><p>移动端的浏览器内核主要说的是系统内置浏览器的内核（Android手机大多是Webkit内核、iOS以及WP7平大多是Safari或者IE内核Trident）</p><details><summary>HTML语义化：</summary><p>根据内容的结构化/语义化，选择合适的标签便于开发和让浏览器更好的解析</p></details><br><details><summary>HTML5新特性</summary><ul><li>更语义化的标签</li><li>本地离线存储</li><li>新的表单控件</li><li>支持音频视频</li><li>支持画布</li><li>拖拽释放</li><li>地理信息</li></ul></details><br><details><summary>HTML5新标签</summary><ul><li>article（文章）</li><li>aside（其他）</li><li>bdi（文本方向）</li><li>details（细节）</li><li>dialong（窗口）</li><li>figcaption（figure标题）</li><li>figure（媒介内容分组）</li><li>footer（底部）</li><li>header（头部）</li><li>main（主体）</li><li>mark（标记）</li><li>meter（度量）</li><li>nav（导航栏）</li><li>progress（进度）</li><li>rp、rt、ruby（拼音）</li><li>section（部分）</li><li>summary（细节标题）</li><li>time（时间）</li><li>wbr（可能换行）</li></ul></details>",11)];Sa.render=function(t,a){return l(),n("section",Ma,Ha)};const _a={},Na=s('<h1>661: CSS选择器(1)</h1><hr><h2>1.普通选择器</h2><p>1.全选择器： * {} // 全选择器不适用伪元素</p><p>2.元素选择器： element {}</p><p>3.类选择器： [element].className {}</p><p>4.id选择器： [element]#id {}</p><p>5.属性选择器： element[attr]{}</p><ul style="margin-left:40px;"><li>element[attr=&quot;val&quot;] {} // 选择attr属性为val的元素</li><li>element[attr^=&quot;val&quot;] {} // 选择attr属性以val开头的元素</li><li>element[attr$=&quot;val&quot;] {} // 选择attr属性以val结尾的元素</li><li>element[attr*=&quot;val&quot;] {} // 选择attr属性中包含val的元素</li><li>element[attr~=&quot;val&quot;] {} // 选择attr多个属性中有val属性的元素</li><li>element[attr|=&quot;val&quot;] {} // 选择attr连字符分隔的属性中第一个是val</li></ul><br><hr><h2>2.关系选择器</h2><p>1.并集选择器： &lt;选择器1&gt; , &lt;选择器2&gt; {}</p><p>2.后代选择器： &lt;选择器1&gt;   &lt;选择器2&gt; {}</p><p>3.子代选择器： &lt;选择器1&gt; &gt; &lt;选择器1&gt; {}</p><p>4.邻兄选择器： &lt;选择器1&gt; + &lt;选择器1&gt; {}</p><p>5.兄弟选择器： &lt;选择器1&gt; ~ &lt;选择器1&gt; {}</p><br><hr><h2>3.伪元素选择器</h2><p>1.element::first-line {} // 选择文本块的首行(a不算文本块)</p><p>2.element::first-letter {} // 选择文本块的首字母(汉字生效)</p><p>3.element::before {content:&quot;&quot;} // 在选择元素前插入内容</p><p>4.element::after {content:&quot;&quot;} // 在选择元素后插入内容</p><br>',25),Aa=o("点击阅读上一篇"),Ia=o("点击阅读下一篇"),Da=a("br",null,null,-1);_a.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Na,a("h2",null,[e(i,{to:"/Blog660"},{default:d((()=>[Aa])),_:1})]),a("h2",null,[e(i,{to:"/Blog662"},{default:d((()=>[Ia])),_:1})]),Da],64)};const Va={},ja=s("<h1>662: CSS选择器(2)</h1><hr><h2>1.结构伪类选择器</h2><p>1.element:only-child {} // 选择父元素仅含一个的子元素</p><p>2.element:only-of-type {} // 选择父元素定义类型唯一的子元素</p><p>3.father :first-child {} // 选择父元素第一个子元素</p><p>4.father :last-child {} // 选择父元素最后一个子元素</p><p>5.father :nth[-last]-child(n) {} // 选择父元素第n个子元素（偶数2n，奇数2n+1，3n，n+5……）</p><p>6.father son:first-of-type {} // father父元素下第一个son子元素</p><p>7.father son:last-of-type {} // father父元素下最后一个son子元素</p><p>8.father son:nth[-last]-of-type(n) {} // father父元素下第n个son子元素</p><br><hr><h2>2.链接伪类选择器</h2><p>4.1.element:link {} // 选择未访问的链接元素</p><p>4.2.element:visited {} // 选择已访问的链接元素</p><p>4.3.element:hover {} // 选择鼠标悬停的元素</p><p>4.4.element:active {} // 选择被用户激活（点击）的元素</p><p>4.5.element:focus {} // 选择获得焦点的元素</p><p>// active覆盖hover，(hover覆盖focus?)</p><br><hr><h2>3.UI伪类选择器</h2><p>3.1.element:enabled/disabled {} // 选择启动/禁用元素</p><p>3.2.element:checked {} // 选择已勾选元素 （配合邻兄选择器可以操作勾选效果）</p><p>3.3.element:default {} // 选择默认元素 (例如提交按钮总是表单的默认按钮)</p><p>3.4.element:valid/invalid {} // 选择有效/无效的input元素（有required属性，需输入内容）</p><p>3.4.// 有效的判断是所有非无效的input元素，button按钮也会被有效input选择器选定</p><p>3.5.element:in-range {} // 选择位于指定范围之内的input元素</p><p>3.6.element:out-of-range {} // 选择位于指定范围之外的input元素</p><p>3.7.element:required {} // 选择具有required属性的input元素</p><p>3.8.element:optional {} // 选择没有required属性的input元素</p><p>3.8.// submit类型的input会选中，optional选择器不分辨不同类型的input元素</p><br><hr><h2>4.其他伪类选择器</h2><p>element:not(&lt;选择器&gt;) {} // 对内选择器取反</p><p>element:empty {} // 选择没有定义任何子元素的元素</p><p>element:lange(&#39;en&#39;) {} // 选择基于lang全局属性值的元素</p><p>element:target {} // 选择URL片段标识符指向的元素</p><br>",41),La=o("点击阅读上一篇"),Ga=o("点击阅读下一篇"),Oa=a("br",null,null,-1);Va.render=function(o,r){const i=t("router-link");return l(),n(c,null,[ja,a("h2",null,[e(i,{to:"/Blog661"},{default:d((()=>[La])),_:1})]),a("h2",null,[e(i,{to:"/Blog663"},{default:d((()=>[Ga])),_:1})]),Oa],64)};const Wa={};r("data-v-66cbb5f2");const Ea=s('<h1 data-v-66cbb5f2>663: 块状样式(1)</h1><hr data-v-66cbb5f2><h2 data-v-66cbb5f2>1.修改元素性质: display: block,   inline,   inline-block,   flex,   grid,   none;</h2><h3 data-v-66cbb5f2>元素分类</h3><table data-v-66cbb5f2><thead data-v-66cbb5f2><tr data-v-66cbb5f2><th data-v-66cbb5f2>性质</th> <th data-v-66cbb5f2>块元素(block)</th> <th data-v-66cbb5f2>行元素(inline)</th> <th data-v-66cbb5f2>行内块(inline-block)</th></tr></thead><tfoot data-v-66cbb5f2><tr data-v-66cbb5f2><th data-v-66cbb5f2>性质</th> <th data-v-66cbb5f2>块元素(block)</th> <th data-v-66cbb5f2>行元素(inline)</th> <th data-v-66cbb5f2>行内块(inline-block)</th></tr></tfoot><tbody data-v-66cbb5f2><tr data-v-66cbb5f2><th data-v-66cbb5f2>标准流</th><td data-v-66cbb5f2>独占一行</td> <td data-v-66cbb5f2>共用一行</td> <td data-v-66cbb5f2>共用一行</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>width/height</th><td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>无效</td> <td data-v-66cbb5f2>有效</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>margin-top/bottom</th><td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>无效</td> <td data-v-66cbb5f2>有效</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>margin-left/right</th><td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>有效</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>padding-top/bottom</th><td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>对标准流无效<br data-v-66cbb5f2>对border、background有效</td> <td data-v-66cbb5f2>有效</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>padding-left/right</th><td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>有效</td> <td data-v-66cbb5f2>有效</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>子元素</th><td data-v-66cbb5f2>块元素、行元素、行内块</td> <td data-v-66cbb5f2>行元素</td> <td data-v-66cbb5f2>具体情况具体分析</td></tr><tr data-v-66cbb5f2><th data-v-66cbb5f2>举例</th><td data-v-66cbb5f2>hi、p、div、ul、ol、li</td> <td data-v-66cbb5f2>a、b、strong、i、em、i、del、s、ins、u、span</td> <td data-v-66cbb5f2>img、input、th、td</td></tr></tbody></table><br data-v-66cbb5f2><hr data-v-66cbb5f2><h2 data-v-66cbb5f2>2.元素宽高</h2><p data-v-66cbb5f2>宽度：width: auto, length, percentage</p><p data-v-66cbb5f2>最小宽度：min-width: auto, length, percentage</p><p data-v-66cbb5f2>最大宽度：max-width: auto, length, percentage</p><p data-v-66cbb5f2>高度：height: auto, length, percentage</p><p data-v-66cbb5f2>最小高度：min-height: auto, length, percentage</p><p data-v-66cbb5f2>最大高度：max-height: auto, length, percentage</p><br data-v-66cbb5f2><hr data-v-66cbb5f2><h2 data-v-66cbb5f2>3.内外边距</h2><p data-v-66cbb5f2>内边距：padding[-top/buttom/left/right]: auto, length, percentage</p><p data-v-66cbb5f2>外边距：margin[-top/buttom/left/right]: auto, length, percentage</p><p class="notes" data-v-66cbb5f2>// padding: 10px // 上下左右内边距都为10px</p><p class="notes" data-v-66cbb5f2>// margin: 10px 20px // 上下外边距为10px，左右外边距为20px</p><p class="notes" data-v-66cbb5f2>// padding: 10px 20px 30px // 上边内边距10px、下内边距30px、左右内边距20px</p><p class="notes" data-v-66cbb5f2>// margin: 10px 20px 30px 40px // 上外边距10px、右外边距20px、下外边距30px、左外边距40px</p><p class="emphasize" data-v-66cbb5f2>// 兄弟垂直外边距塌陷：只给一边设置外边距</p><p class="emphasize" data-v-66cbb5f2>// 父子外边距合并：1.父盒子该边加border；2.父盒子该边加padding；3.父盒子加overflow:hidden</p><br data-v-66cbb5f2>',26),$a=o("点击阅读上一篇"),za=o("点击阅读下一篇"),Ya=a("br",null,null,-1);i(),Wa.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Ea,a("h2",null,[e(i,{to:"/Blog662"},{default:d((()=>[$a])),_:1})]),a("h2",null,[e(i,{to:"/Blog664"},{default:d((()=>[za])),_:1})]),Ya],64)},Wa.__scopeId="data-v-66cbb5f2";const Fa={},Xa=s('<h1>664: 块状样式(2)</h1><hr><h2>1.边框: border: border-style   border-width   border-color;</h2><p>边框样式: border-style: none, idden, solid, dashed, dotted, double, groove, ridge, inset, outset, inherit;</p><p>边框宽度: border-width: length, thin(1px), medium(3px), thick(5px);</p><p>边框颜色: border-color: transparent, colorName, #xxx, #xxxxxx, rgba(r,g,b,a), hsla(色相,饱和度%,亮度%,透明度), inherit;</p><p>单边边框: border-xx: border-xx-style   border-xx-width   border-xx-color <span class="notes">// xx-&gt;[top, bottom, left, right]</span></p><p>单边样式: border-xx-style: ……(与border-style取值相同); <span class="notes">// xx-&gt;[top, bottom, left, right]</span></p><p>单边宽度: border-xx-width: ……(与border-width取值相同); <span class="notes">// xx-&gt;[top, bottom, left, right]</span></p><p>单边颜色: border-xx-color: ……(与border-color取值相同); <span class="notes">// xx-&gt;[top, bottom, left, right]</span></p><br><hr><h2>2.轮廓: outline: outline-style   outline-width   outline-color;</h2><p>轮廓样式: outline-style: none, idden, solid, dashed, dotted, double, groove, ridge, inset, outset, inherit;</p><p>轮廓宽度: outline-width: length, thin(1px), medium(3px), thick(5px);</p><p>轮廓颜色: outline-color: transparent, colorName, #xxx, #xxxxxx, rgba(r,g,b,a), hsla(色相,饱和度%,亮度%,透明度), inherit;</p><p>轮廓偏移量: outline-offset length; <span class="notes">// outline-offset不能简写到outlin中</span></p><br><hr><h2>3.圆角边框: border-radius:   length,   percentage</h2><p class="notes">// border-radius: 8px; // 四个角的x轴半径和y轴半径均为8px</p><p class="notes">// border-radius: 50%; // 四个角的x轴半径和y轴半径均为元素的一半</p><p class="notes">// border-radius: 50% / 20px; // 四个角的x轴半径为元素宽度的一半，y轴半径为20px</p><p class="notes">// border-radius: 50%   20px; // 左上角和右下角xx轴半径和y轴半径均为元素的一半；右上角和左下角x轴半径和y轴半径均为20px</p><p class="notes">// border-radius: 50% 80px / 20% 10px; </p><p class="notes">// 左上角和右下角x轴半径为元素50%，y轴半径为元素20%；右上角和左下角x轴半径为80px，y轴半径为10px</p><p class="notes">// border-radius: 50% 80px   20% 10px; </p><p class="notes">// 左上角x轴半径和y轴半径均为元素的一半；右上角x轴半径和y轴半径均为80px；</p><p class="notes">// 右下角x轴半径和y轴半径均为元素的20%；左下角x轴半径和y轴半径均为80px</p><p class="notes">// lt_x rt_x rb_x lb_x / lt_y rt_y rb_y lb_y</p><p>单角圆角边框: border-top/bpttom-left/rifht-radius: length|percentage_x   length|percentage_y</p><br><hr><h2>4.盒子尺寸: box-sizing: content-box, padding-box, border-box, margin-box</h2><br><h2>5.盒子阴影: box-shadow: hoffset voffset blur spread color [inset]</h2><p class="notes">// hoffset[length](水平偏移量，正值向右，负值向左)</p><p class="notes">// voffset[length](垂直偏移量，正值向下，负值向上)</p><p class="notes">// blur[length](模糊值，默认0边界清晰)</p><p class="notes">// spread[length](延伸半径，正值代表延伸扩展，负值代表反方向延伸)</p><p class="notes">// inset[布尔属性](向内阴影)</p><br>',42),Ra=o("点击阅读上一篇"),Ua=o("点击阅读下一篇"),Ja=a("br",null,null,-1);Fa.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Xa,a("h2",null,[e(i,{to:"/Blog663"},{default:d((()=>[Ra])),_:1})]),a("h2",null,[e(i,{to:"/Blog665"},{default:d((()=>[Ua])),_:1})]),Ja],64)};const Ka={},Za=s("<h1>665: 块状样式(3)</h1><hr><h2>1.背景: background: </h2><p>背景颜色：background-color: inherit、transparent、color, hsla(色相,饱和度%,亮度%,透明度)</p><p>    // 色相是0~360，0和360为红色，120为绿色，240为蓝色，饱和度和亮度为0~100%，透明度为0~1</p><p>背景图片：background-image: none, inherit, url(path)</p><p>背景重复：background-repeat: inherit, repeat, repeat-x, repeat-y, space, round, no-repeat</p><p>背景附着：background-attachment: fixed(相对窗口固定), local(相对内容固定), scroll(相对元素固定)</p><p>背景位置：background-position: top, bottom, left, right, center, length, percentage</p><p>背景尺寸：background-size: contain(完全显示), cover(完全覆盖), auto, length, percentage</p><p>背景剪辑：background-clip: border-box, padding-box, content-box // 规定背景剪裁保留部分</p><p>背景原位：background-origin: border-box, padding-box, content-box</p><p>    // 规定背景图像的初始位置，若background-attachment: fixed，则该属性没有效果</p><br><p>背景混合模式：background-blend-mode: </p><p>normal // 默认。把混合模式设置为普通</p><p>multiply // 把混合模式设置为 multiply（乘）</p><p>screen // 把混合模式设置为 screen（屏幕）</p><p>overlay // 把混合模式设置为 overlay（覆盖）</p><p>darken // 把混合模式设置为 overlay（覆盖）</p><p>lighten // 把混合模式设置为 lighten（变亮）</p><p>color-dodge // 把混合模式设置为 color-dodge（颜色减淡）</p><p>saturation // 把混合模式设置为 saturation（饱和度）</p><p>color // 把混合模式设置为 color（颜色）</p><p>luminosity // 把混合模式设置为 luminosity（亮度）</p><br><hr><h2>2.图片边框: border-image: </h2><p>border-image-outset 规定边框图像区域超出边框的量。</p><p>border-image-repeat 规定边框图像应重复、圆角、还是拉伸。</p><p>border-image-slice 规定如何裁切边框图像。</p><p>border-image-source 规定用作边框的图像的路径。</p><p>border-image-width 规定边框图像的宽度。</p><br><hr><h2>3.溢出处理: overflow: hidden, visible, scroll, auto, unset, inherit, initial;</h2><p>水平溢出: overflow-x: hidden, visible, scroll, auto, unset, inherit, initial;</p><p>垂直溢出: overflow-y: hidden, visible, scroll, auto, unset, inherit, initial;</p><br>",39),Qa=o("点击阅读上一篇"),te=o("点击阅读下一篇"),ne=a("br",null,null,-1);Ka.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Za,a("h2",null,[e(i,{to:"/Blog664"},{default:d((()=>[Qa])),_:1})]),a("h2",null,[e(i,{to:"/Blog666"},{default:d((()=>[te])),_:1})]),ne],64)};const ae={},ee=s('<h1>666: 布局样式(1)</h1><hr><h2>列式布局</h2><br><h3>容器属性</h3><p class="abbrev">列: columns:   column-width   column-count;</p><p>列宽: column-width: length;</p><p>列数: column-count: number;</p><p>列间隙: column-gap: length;</p><p class="abbrev">间隙填充: column-rule:   column-rule-style   column-rule-width   column-rule-color</p><p>间隙填充样式: column-rule-style: ;</p><p>间隙填充宽度: column-rule-width: ;</p><p>间隙填充颜色: column-rule-color: ;</p><h3>元素属性: 跨列数: column-span: number;</h3><br><hr><h2>浮动布局</h2><p>设置浮动: float:   left,   right,   none;</p><p>清除浮动: clear:   left,   right,   both,   none;</p><p class="notes">// 浮动会脱离标准流，不占用原空间，且会改变元素的性质，浮动只会影响后面的元素，不影响前面元素</p><p>1.额外标签法（隔墙法）：浮动子元素后添加&lt;br style=&quot;clear:both&quot;&gt;</p><p class="notes">// 添加无意义标签，结构化较差</p><p>2.给浮动元素父元素添加属性： overflow: hidden; </p><p class="notes">// 内容增多时容易造成不自动换行而被隐藏，无法显示溢出元素</p><p>3.after伪元素法：给浮动元素父元素添加类：clearfix</p><pre>&lt;style&gt;\n    .clearfix {\n        *zoom:1;\n    }\n    .clearfix::after {\n        content:&quot;&quot;;\n        display:block;\n        height:0;\n        visibility:hidden;\n        clear:both;\n    }\n&lt;/style&gt;\n    </pre><p>4.before和after双伪元素法：给浮动元素父元素添加类：clearfix</p><pre>&lt;style&gt;\n    .clearfix::before,\n    .clearfix::after {\n        content:&quot;&quot;;\n        display:table;\n    }\n    .clearfix::after {\n        clear:both;\n    }\n    .clearfix {\n        *zoom:1;\n    }\n&lt;/style&gt;\n</pre><br><hr><h2>定位布局</h2><p>创建定位：position: static, relative, absolute, fixed</p><p class="notes">// 静态定位(static)，普通布局，默认值（top/bottom/left/right无效）</p><p class="notes">// 相对定位(relative)，相对于普通位置定位，但不影响标准流布局，会改变元素的性质</p><p class="notes">// 绝对定位(absolute)，相对于不为static的第一位祖先元素定位，会脱标影响标准流布局，会改变元素的性质</p><p class="notes">// 固定定位(fixed)，相对浏览器窗口定位（会随着浏览器滚动），会脱标影响标准流布局</p><p>距离定位顶部距离：top: length, </p><p>距离定位底部距离：bottom: length, </p><p>距离定位左侧距离：left: length, </p><p>距离定位右侧距离：right: length, </p><p>层叠顺序：z-index: number // 值允许负值，值越小，层叠顺序越靠后</p><br>',42),de=o("点击阅读上一篇"),ce=o("点击阅读下一篇"),le=a("br",null,null,-1);ae.render=function(o,r){const i=t("router-link");return l(),n(c,null,[ee,a("h2",null,[e(i,{to:"/Blog665"},{default:d((()=>[de])),_:1})]),a("h2",null,[e(i,{to:"/Blog667"},{default:d((()=>[ce])),_:1})]),le],64)};const oe={},re=s("<h1>667: 布局样式(2)</h1><hr><h2>弹性布局/伸缩布局/flex布局</h2><h3>父元素属性</h3><p>flex-flow: flex-direction flex-wrap</p><p>排列方式：flex-direction: row, row-reverse, column, column-reverse</p><p>溢出换行：flex-wrap: nowrap, wrap, wrap-reverse</p><p>水平对齐方式：justify-content: flex-start, flex-end, center, space-around, space-between</p><p>单行垂直对齐方式：align-items: stretch, flex-start, flex-end, center, baseline</p><p>多行垂直对齐方式：align-content: stretch, flex-start, flex-end, center, space-between, space-around</p><br><h3>子元素属性</h3><p>指定顺序order: number // 先后顺序从小到大，默认为1</p><p>flex: flex-grow flex-shrink flex-basis</p><p>延展权重：flex-grow: number</p><p>收缩权重：flex-shrink: number</p><p>基本宽度：flex-basis: length</p><p>垂直对齐：align-self: auto flex-start flex-end center stretch baseline</p><br>",19),ie=o("点击阅读上一篇"),se=o("点击阅读下一篇"),be=a("br",null,null,-1);oe.render=function(o,r){const i=t("router-link");return l(),n(c,null,[re,a("h2",null,[e(i,{to:"/Blog666"},{default:d((()=>[ie])),_:1})]),a("h2",null,[e(i,{to:"/Blog668"},{default:d((()=>[se])),_:1})]),be],64)};const ue={},pe=s('<h1>网格布局(grid布局)</h1><hr><h2>容器属性</h2><p class="abbrev">网格: grid: grid-template   grid-auto-rows   grid-auto-columns   grid-auto-flow</p><p class="abbrev">网格容器: grid-template：grid-template-rows   grid-template-columns   grid-template-areas;</p><p>网格容器行: grid-template-rows: length, repeat(num/auto-fill, length), minmax(min, max), min-content, max-content, subgrid, auto, inherit, initial, none, unset;</p><p>网格容器列: grid-template-columns: length, repeat(num/auto-fill, length), minmax(min, max), min-content, max-content, subgrid, auto, inherit, initial, none, unset;</p><p>网格容器区域: grid-template-areas: &#39;name1 name2 .&#39; &#39;. . .&#39;;</p><p>网格行默认尺寸: grid-auto-rows: length, minmax(min, max), min-content, max-content, auto</p><p>网格列默认尺寸: grid-auto-columns: length, minmax(min, max), min-content, max-content, auto</p><p>网格默认流向: grid-auto-flow: row, columns, dense, inherit, initial, unset;</p><br><p class="abbrev">间距: gap: row-gap   columns-gap;</p><p>元素行间距: row-gap: length;</p><p>元素列间距: columns-gap: length;</p><p class="abbrev">元素对齐: place-items: align-items justify-items;</p><p>元素垂直对齐: align-items: center, start, end, stretch, inherit, initial, unset;</p><p>元素水平对齐: justify-items: center, start, end, left, right, stretch, inherit, initial, unset;</p><p class="abbrev">内容对齐: place-content: align-content justify-content;</p><p>内容垂直对齐: align-content: center, start, end, stretch, space-around, space-between, sapce-evenly, inherit, initial, unset;</p><p>内容水平对齐: justify-content: center, start, end, left, right, space-around, space-between, sapce-evenly, stretch, inherit, initial, unset;</p><br><hr><h2>元素属性</h2><p>区域名称: grid-area: name1 rowStartNum / columnsStartNum / rowEndNum / columnsEndNum;</p><p class="abbrev">自身对齐: place-self: align-self justify-self;</p><p>自身垂直对齐: align-self: stretch, start, end, center</p><p>自身水平对齐: justify-self: stretch, start, end, center</p><p>跨行: grid-row: startNum(包括) / endNum(不包括)</p><p>grid-row-start: startNum/span num;</p><p>grid-row-end: endNum/span num;</p><p>跨列: grid-column: startNum(包括) / endNum(不包括)</p><br>',33),he=o("点击阅读上一篇"),ve=a("br",null,null,-1);ue.render=function(o,r){const i=t("router-link");return l(),n(c,null,[pe,a("h2",null,[e(i,{to:"/Blog667"},{default:d((()=>[he])),_:1})]),ve],64)};const me={},ge=a("h1",null,"sass",-1),fe=a("p",null,"安装sass: npm install sass@4 -D",-1);me.render=function(t,a,e,d,o,r){return l(),n(c,null,[ge,fe],64)};const xe={},ye={class:"blogContent"},we=s("<h1>框架绪论</h1><hr><h2>Vue</h2><dl><dt>Vue是渐进式JavaScript框架</dt><dd>渐进式：声明式渲染--&gt;组件系统--&gt;客户端路由--&gt;集中式状态管理--&gt;项目构建</dd><dd>区别库与框架：库是以提供API为主，框架以提供基础服务为主</dd><dd>Vue代码运行原理：Vue代码通过Vue框架编译（渲染）为原生JavaScript代码</dd><dt>Vue优点</dt><dd>易用：熟悉HTML、CSS、JavaScript知识后可快速上手Vue</dd><dd>灵活：在一个库和一套完整框架之间自由变换</dd><dd>高效：KB级运行大小、超快虚拟DOM</dd><dt>前端渲染</dt><dd>后台数据与HTML模板结合的过程，前端渲染的结果就是静态HTML</dd><dd>常见前端渲染方式：1.原生JavaScript拼接字符；2.前端模板引擎；3.Vue模板语法</dd><dt>Vue数据</dt><dd>1.HTML5响应式：屏幕尺寸的变化导致页面样式的变化</dd><dd>2.数据响应式：数据的变化导致页面样式的变化</dd><dd>3.指令本质是自定义属性</dd><dd>4.数据绑定：将数据填充到标签中</dd><dd>5.Vue通过指令实现数据绑定</dd><dd>6.双向数据绑定：数据变化可以导致页面变化，页面变化也可以导致数据变化</dd><dt>Vue设计理念</dt><dd>Vue设计模式为MVVM，第一个M指model表示数据，第一个V指view表示视图，VM指view model表示视图数据链接层</dd></dl>",4);xe.render=function(t,e){return l(),n("section",ye,[we,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/901"))},"点击阅读下一篇")])};const ke={},qe={class:"blogContent"},Te=s('<h1>Vite</h1><hr><h2>官方资料</h2><p><a href="https://cn.vitejs.dev/">Vite中文官网：https://cn.vitejs.dev/</a></p><hr><h2>Vite特点</h2><p>1.冷服务启动 <br> 2.热更新开发 <br> 3.按需编译</p><hr><h2>基本使用</h2><p>前置条件：安装Node</p><p>创建项目：npm init vite@latest</p><p>安装依赖：npm install</p><p>启动项目：npm run dev</p><p>// Error: esbuild: Failed to install correctly处理方案：node node_modules/esbuild/install.js</p><p>npm install sass -D</p><hr><h2>目录介绍</h2><p>node_modules「第三方依赖源代码」</p><p>public「公用资源目录」</p><p>src「动态资源目录」</p><p>src/asset「资源目录」</p><p>src/components「组件目录」</p><p>src/App.vue「根组件」</p><p>src/main.js「入口文件」</p><p>.gitignore「git管理忽略文件配置」</p><p>index.html「主页面」</p><p>package-lock.json「」</p><p>package.json「」</p><p>vite.config.js「vite配置文件」</p><hr><h2>额外配置</h2><code><pre>---------- vite.config.js ----------\nimport { defineConfig } from &#39;vite&#39;\nimport vue from &#39;@vitejs/plugin-vue&#39;\n\nexport default defineConfig({\n  base: &#39;./&#39;,\n  publicPath: &#39;./&#39;,\n  plugins: [vue()],\n})\n\n    </pre></code>',32);ke.render=function(t,e){return l(),n("section",qe,[Te,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/900"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/902"))},"点击阅读下一篇")])};const Be={},Ce={class:"blogContent"},Pe=s("<h1>Vue-cli</h1><hr><h2>环境配置</h2><p>1.安装Node.js</p><p>2.安装Vue-cli：打开cmd命令行，输入指令：&quot;npm install -g @vue/cli&quot;</p><p>3.查看Vue-cli版本号：vue --version</p><p>4.创建项目：vue create ProductName</p><p>5.Please pick a preset:(Use arrow keys): <strong>Manually select features</strong></p><p>6.Choose Vue version: <strong>Babel、Router、Vuex、CSS Pre-processors</strong></p><p>7.Choose a version of Vue.js that you want to start the project with: <strong>3.x</strong></p><p>8.Use history mode for router?: <strong>No</strong></p><p>9.Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): <strong>Less</strong></p><p>11.Where do you prefer placing config for Babel, ESLint, etc.?: <strong>In dedicated config files</strong></p><p>12.</p><p>13.使用VScode项目终端，输入指令：&quot;npm run serve&quot;启动服务</p><p>14.打开提供的路径：http://localhost:8080/</p><p>15.使用VScode项目终端：输入指令：&quot;npm run bulid&quot;打包服务</p><hr><h2>Vue-cli文件介绍</h2><p>1.package.json：配置文件</p><p>2.node_modules：依赖文件</p><p>3.public：静态资源</p><p>4.src：动态资源</p><p>5.assets：图片，json数据……</p><p>6.router：路由</p><p>7.components：通用组件</p><p>8.views：页面组件</p><p>9.App.vue：</p><p>10.main.js：</p><p>11.index.js：</p><hr><h2>手动配置文件</h2><p>1.在项目根目录下创建&quot;vue.config.js&quot;文件</p><pre>module.exports = {\n    // 修改打包输出路径\n    outputDir: &#39;build&#39;\n}\n    </pre><p></p><hr><h2>清除默认设置</h2><p>1.清空App.vue文件</p><p>2.清空main.js文件</p><p>3.清空index.js文件</p><p></p>",41);Be.render=function(t,e){return l(),n("section",Ce,[Pe,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/901"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/903"))},"点击阅读下一篇")])};const Se={},Me={class:"blogContent"},He=a("h1",null,"Vue数据绑定",-1),_e=a("hr",null,null,-1),Ne=a("h2",null,"基本格式",-1),Ae=a("hr",null,null,-1),Ie=a("h2",null,"数据绑定",-1);Se.render=function(t,e){return l(),n("section",Me,[He,_e,Ne,a("code",null,[a("pre",null,"---------- index.html ----------\n<body>\n    \x3c!-- Vue根组件挂载点 --\x3e\n    <div id=\"app\"></div>\n    \x3c!-- 导入入口模板文件 --\x3e\n    <script type=\"module\" src=\"/src/main.js\"><\/script>\n</body>\n\n---------- /src/main.js ----------\n// 从vue中导入createApp「createApp用于创建vue实例」\nimport { createApp } from 'vue'\n// 从动态资源目录中导入根组件\nimport App from './App.vue'\n\n// 将根组件创建为vue实例，并挂载到html中的#app元素上\ncreateApp(App).mount('#app')\n\n---------- /src/App.vue ----------\n// template内书写HTML模板\n<template>\n    <h1>"+b(t.msg)+'</h1>\n</template>\n\n// script内书写JavaScript脚本\n<script>\nexport default {\n    data() {\n        return {\n            msg: "HelloWorld",\n        }\n    }\n}\n<\/script>\n\n// style内书写css样式\n<style>\nh1 {\n    color: #ff0;\n}\n</style>\n\n    ',1)]),Ae,Ie,a("code",null,[a("pre",null,"---------- /src/App.vue ----------\n<template>\n    <h1>1.插值表达式："+b(t.testNumber+28)+"</h1>\n    <h1 v-text=\"'2.v-text：' + testString\"></h1>\n    <h1 v-html=\"'3.v-html：' + testHTML\"></h1>\n    <h1 v-pre>4.v-pre："+b(t.testNumber+28)+'</h1>\n    <h1 v-text="\'5.v-model：\' + testModel"></h1>\n    <input type="text" v-model="testModel">\n    <h1 v-once v-text="\'6.v-once：\' + testModel"></h1>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            testNumber: 12,\n            testString: "HelloWorld",\n            testHTML: "<ins>下划线文本</ins>",\n            testModel: "Yixuan",\n        }\n    }\n}\n<\/script>\n    ',1)]),a("h2",{onClick:e[0]||(e[0]=n=>t.$router.replace("/Blog/902"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.replace("/Blog/904"))},"点击阅读下一篇")])};const De={},Ve={class:"blogContent"},je=s("<h1>Vue事件绑定</h1><hr><h2>点击事件</h2><code><pre>---------- /src/App.vue ----------\n&lt;template&gt;\n&lt;main&gt;\n    &lt;p v-text=&#39;testNumber&#39;&gt;&lt;/p&gt;\n    &lt;button v-on:click=&quot;testNumber++&quot;&gt;点击自增&lt;/button&gt;\n    &lt;button @click=&quot;redNum&quot;&gt;点击自减&lt;/button&gt;\n&lt;/main&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            testNumber: 10,\n        }\n    },\n    methods: {\n        redNum() {\n            this.testNumber--;\n        }\n    }\n}\n&lt;/script&gt;\n    </pre></code><hr><h2>事件参数</h2><code><pre>---------- /src/App.vue ----------\n&lt;template&gt;\n&lt;main&gt;\n    &lt;p v-text=&#39;testNumber&#39;&gt;&lt;/p&gt;\n    &lt;button @click=&quot;alertTag&quot;&gt;点击弹出事件元素内容&lt;/button&gt;\n    &lt;button @click=&quot;addTen(testNumber,$event)&quot;&gt;点击数字翻倍&lt;/button&gt;\n&lt;/main&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            testNumber: 10,\n        }\n    },\n    methods: {\n        alertTag(event) {\n            alert(event.target.innerHTML)\n        },\n        addTen(num,event) {\n            this.testNumber = this.testNumber + num\n            alert(event)\n        }\n    }\n}\n&lt;/script&gt;\n    </pre></code><hr><h2>阻止事件冒泡修饰符</h2><code><pre>---------- /src/App.vue ----------\n&lt;template&gt;\n&lt;main&gt;\n    &lt;p v-text=&#39;testNumber&#39;&gt;&lt;/p&gt;\n    &lt;div @click=&quot;testNumber++&quot;&gt;\n        &lt;button @click=&quot;function(){}&quot;&gt;不阻止事件冒泡&lt;/button&gt;\n        &lt;button @click=&quot;$event.stopPropagation()&quot;&gt;传统方式阻止事件冒泡&lt;/button&gt;\n        &lt;button @click.stop=&quot;function(){}&quot;&gt;事件修饰符阻止事件冒泡&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/main&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            testNumber: 10,\n        }\n    }\n}\n&lt;/script&gt;\n    </pre></code><hr><h2>阻止默认行为修饰符</h2><code><pre>---------- /src/App.vue ----------\n&lt;template&gt;\n&lt;main&gt;\n    &lt;a href=&quot;https://www.baidu.com/&quot; @click=&quot;function(){}&quot;&gt;不阻止默认行为&lt;/a&gt;&lt;br/&gt;\n    &lt;a href=&quot;https://www.baidu.com/&quot; @click=&quot;$event.preventDefault()&quot;&gt;传统方式阻止默认行为&lt;/a&gt;&lt;br/&gt;\n    &lt;a href=&quot;https://www.baidu.com/&quot; @click.prevent=&quot;function(){}&quot;&gt;事件修饰符阻止默认行为&lt;/a&gt;\n&lt;/main&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {}\n    }\n}\n&lt;/script&gt;\n    </pre></code><hr><h2>按键修饰符</h2><code><pre>---------- /src/App.vue ----------\n&lt;template&gt;\n&lt;form&gt;\n    &lt;label for=&quot;uname&quot;&gt;uname：&lt;/label&gt;\n    &lt;input type=&quot;text&quot; id=&#39;uname&#39; name=&#39;uname&#39; v-model=&#39;uname&#39; @keyup.delete=&#39;deleteUname&#39;&gt;\n    &lt;br&gt;\n    &lt;label for=&quot;paswd&quot;&gt;paswd：&lt;/label&gt;\n    &lt;input type=&quot;password&quot; id=&#39;paswd&#39; name=&quot;paswd&quot; v-model=&#39;paswd&#39; @keyup.delete=&#39;deletePaswd&#39; @keyup.enter=&#39;submitUP&#39;&gt;\n    &lt;!-- delete表示删除键，enter表示回车键，此外常用的还有esc、tab、space、up、down、left、right --&gt;\n&lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            uname: &#39;&#39;,\n            paswd: &#39;&#39;,\n        }\n    },\n    methods: {\n        deleteUname() {\n            this.uname = &#39;&#39;;\n        },\n        deletePaswd() {\n            this.paswd = &#39;&#39;;\n        },\n        submitUP() {\n            alert(&#39;uname:&#39;+this.uname+&#39;\\npaswd:&#39;+this.paswd)\n        }\n    }\n}\n&lt;/script&gt;\n    </pre></code>",16);De.render=function(t,e){return l(),n("section",Ve,[je,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.push("/Blog/903"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.push("/Blog/905"))},"点击阅读下一篇")])};const Le={},Ge={class:"blogContent"},Oe=a("h1",null,"Vue属性样式",-1),We=a("hr",null,null,-1),Ee=a("h2",null,"属性绑定",-1),$e=a("code",null,[a("pre",null,'---------- 范例1 ----------\n---------- /src/App.vue ----------\n<template>\n<main>\n    <input type="text" v-model=\'myNum\'>\n    <br>\n    <meter v-bind:value=\'myNum\' max=\'100\'></meter>\n    <br>\n    <progress :value=\'myNum\' max=\'100\'></progress>\n</main>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            myNum: 60,\n        }\n    }\n}\n<\/script>\n\n---------- 范例2（此类情况更推荐样式绑定） ----------\n---------- /src/App.vue ----------\n<template>\n    <div :style="{width:widthStyle, height:heightStyle, border:borderStyle, backgroundColor:backgroundColorStyle}"></div>\n    <button @click="switch5">切换</button>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            widthStyle: "100px",\n            heightStyle: "100px",\n            borderStyle: "solid 1px #0ff",\n            backgroundColorStyle: "#ff0",\n        }\n    },\n    methods: {\n        switch5: function() {\n            if (this.borderStyle === "solid 1px #0ff" && this.backgroundColorStyle === "#ff0") {\n                this.borderStyle = "solid 1px #000"\n                this.backgroundColorStyle = "#0f0"\n            } else if (this.borderStyle === "solid 1px #000" && this.backgroundColorStyle === "#0f0") {\n                this.borderStyle = "solid 1px #0ff"\n                this.backgroundColorStyle = "#ff0"\n            }\n        }\n    }\n}\n<\/script>\n    ')],-1),ze=a("hr",null,null,-1),Ye=a("h2",null,"样式绑定",-1),Fe=a("code",null,[a("pre",null,'---------- 更推荐前两种，取消样式的逻辑操作比较方便 ----------\n---------- /src/App.vue ----------\n<template>\n    <div :class="{sty1: judge1, sty2: judge2}"></div>\n    <button @click="switch1">切换</button>\n\n    <div :class="objClass"></div>\n    <button @click="switch2">切换</button>\n\n    <div :class="[sty1Class, sty2Class]"></div>\n    <button @click="switch3">切换</button>\n\n    <div :class="arrClass"></div>\n    <button @click="switch4">切换</button>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            judge1: true,\n            judge2: false,\n            objClass: {\n                sty1: true,\n                sty2: false,\n            },\n            sty1Class: "sty1",\n            sty2Class: "",\n            arrClass: ["sty1",""],\n        }\n    },\n    methods: {\n        switch1: function() {\n            this.judge1 = !this.judge1\n            this.judge2 = !this.judge2\n        },\n        switch2: function() {\n            this.objClass.sty1 = !this.objClass.sty1\n            this.objClass.sty2 = !this.objClass.sty2\n        },\n        switch3: function() {\n            if (this.sty1Class === "sty1") {\n                this.sty1Class = ""\n                this.sty2Class = "sty2"\n            } else if (this.sty1Class === "") {\n                this.sty1Class = "sty1"\n                this.sty2Class = ""\n            }\n        },\n        switch4: function() {\n            if (this.arrClass[0] === "sty1") {\n                this.arrClass[0] = ""\n                this.arrClass[1] = "sty2"\n            } else if (this.arrClass[0] === "") {\n                this.arrClass[0] = "sty1"\n                this.arrClass[1] = ""\n            }\n        }\n    }\n}\n<\/script>\n\n<style>\n.sty1 {\n    width: 100px;\n    height: 100px;\n    border: solid 1px #0ff;\n    background-color: #ff0;\n}\n\n.sty2 {\n    width: 100px;\n    height: 100px;\n    border: solid 1px #000;\n    background-color: #0f0;\n}\n    \n</style>\n    ')],-1);Le.render=function(t,e){return l(),n("section",Ge,[Oe,We,Ee,$e,ze,Ye,Fe,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.push("/Blog/904"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.push("/Blog/906"))},"点击阅读下一篇")])};const Xe={},Re={class:"blogContent"},Ue=a("h1",null,"Vue分支循环",-1),Je=a("pre",null,'---------- /src/App.vue ----------\n<template>\n    <p v-if="score>90">优秀</p>\n    <p v-else-if="score>80">良好</p>\n    <p v-else-if="score>70">普通</p>\n    <p v-else-if="score>60">及格</p>\n    <p v-else>不及格</p>\n\n    <p v-show="flage">测试v-show</p>\n    <p v-show="!flage">测试v-show</p>\n\n    <ul>\n        <li :key="i" v-for="i in fruit" v-text="i"></li>\n    </ul>\n\n    <ul>\n        <li :key="item" v-for="(item,index) in fruit" v-text="index + \'：\' +item"></li>\n    </ul>\n\n    <ul>\n        <li :key="key" v-for="(value, key) in price" v-text="key + \'：\' + value"></li>\n    </ul>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            score: 52,\n            flage: true,\n            fruit: ["apple", "orange", "banana"],\n            price: {\n                "apple": 10,\n                "orange": 15,\n                "banana": 20,\n            }\n        }\n    }\n}\n<\/script>\n    ',-1);Xe.render=function(t,e){return l(),n("section",Re,[Ue,Je,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.push("/Blog/905"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.push("/Blog/907"))},"点击阅读下一篇")])};const Ke={},Ze={class:"blogContent"},Qe=a("h1",null,"Vue生命周期",-1),td=a("p",null,"Vue生命周期钩子（函数）：beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeUnmount、unmounted",-1),nd=a("hr",null,null,-1),ad=a("h2",null,"beforeUpdate、updated",-1),ed=a("p",null,"beforeUpdate：在model数据层的数据更新后，view视图层的数据更新前自动执行的函数",-1),dd=a("p",null,"updated：在model数据层和view视图层的数据都更新后自动执行的函数",-1);Ke.render=function(t,e){return l(),n("section",Ze,[Qe,td,nd,ad,ed,dd,a("code",null,[a("pre",null,'---------- src/App.vue ----------\n<template>\n    <button id="btn" @click="addNum">'+b(t.num)+'</button>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            num: 12,\n        }\n    },\n    methods: {\n        addNum() {\n            this.num += 1\n        }\n    },\n    beforeUpdate() {\n        console.log("beforeUpdate");\n        console.log(this.num);\n        console.log(document.getElementById("btn").innerHTML);\n    },\n    updated() {\n        console.log("updated");\n        console.log(this.num);\n        console.log(document.getElementById("btn").innerHTML);\n    }\n}\n<\/script>\n    ',1)]),a("h2",{onClick:e[0]||(e[0]=n=>t.$router.push("/Blog/906"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.push("/Blog/908"))},"点击阅读下一篇")])};const cd={},ld={class:"blogContent"},od=a("h1",null,"Vue组件传参",-1),rd=a("hr",null,null,-1),id=a("h2",null,"父组件向子组件传递参数",-1),sd=a("hr",null,null,-1),bd=a("h2",null,"子组件向父组件传递参数",-1);cd.render=function(t,e){return l(),n("section",ld,[od,rd,id,a("code",null,[a("pre",null,'---------- src/App.vue ----------\n<template>\n    <son :text="sendText" />\n</template>\n\n<script>\nimport son from "./components/son.vue"\nexport default {\n    data() {\n        return {\n            sendText: "父组件向子组件传递的内容",\n        }\n    },\n    components: {\n        son,\n    }\n\n}\n<\/script>\n\n---------- src/components/son.vue ----------\n<template>\n    <div>'+b(t.text)+'</div>\n</template>\n\n<script>\nexport default {\n    name: "son",\n    props: ["text"],\n    data() {\n        return {}\n    }\n}\n<\/script>\n    ',1)]),sd,bd,a("code",null,[a("pre",null,'---------- src/App.vue ----------\n<template>\n    <div>\n        <son @transText="receiveText" />\n        <p>父组件接收内容：'+b(t.SFtext)+'</p>\n    </div>\n</template>\n<script>\nimport son from \'./components/son.vue\'\nexport default {\n    data () {\n        return {\n            SFtext: "",\n        }\n    },\n    methods:{\n        receiveText(text){\n            this.SFtext= text\n        }\n    },\n    components:{\n        son\n    },\n}\n<\/script>\n\n---------- src/components/son.vue ----------\n<template>\n    <input type="text" placeholder="子组件向父组件传递的内容" v-model="SFtext">\n    <br>\n    <button @click="sendText">子组件向父组件传值</button>\n</template>\n<script>\nexport default {\n    name: "son",\n    emits: ["transText"],\n    data(){\n        return {\n            SFtext: "",\n        }\n    },\n    methods:{\n        sendText:function(){\n            this.$emit(\'transText\',this.SFtext)\n        }\n    }\n}\n<\/script>\n    ',1)]),a("h2",{onClick:e[0]||(e[0]=n=>t.$router.push("/Blog/907"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.push("/Blog/909"))},"点击阅读下一篇")])};const ud={},pd=a("h1",null,"Vue-Router基本格式",-1),hd=a("pre",null,"------------------------- src/views/home.vue -------------------------\n// 1.定义路由需要的组件\n<template>\n    <h1>home</h1>\n</template>\n\n------------------------- src/views/blog.vue -------------------------\n// 1.定义路由需要的组件\n<template>\n    <h1>blog</h1>\n</template>\n\n------------------------- src/javascript/router-index.js -------------------------\n// 2.配置路由规则\n// 2.1.导入创建路由的API和设置历史模式的API\nimport {createRouter, createWebHistory} from 'vue-router'\n\n// 2.2.导入路由需要用到的组件\nimport Home from './views/home.vue'\nimport Blog from './views/blog.vue'\n\n// 2.3.导出路由规则\n// 2.3.1.使用createRouter API创建路由\nexport default createRouter({\n    // 2.3.2.使用createWebHistory API设置路由为历史模式\n    history: createWebHistory(),\n    // 2.3.3.配置具体的路由规则\n    routes: [\n        {path: '/', component: Home,},\n        {path: \"/Home\", component: Home,},\n        {path: \"/Blog\", component: Blog,},\n    ]\n})\n\n------------------------- src/main.js -------------------------\n// 3.将路由配置到Vue实例\nimport { createApp } from 'vue'\nimport App from './App.vue'\n// 3.1.导入路由规则\nimport router from  './javascript/router-index.js'\n\n// 3.2.将路由配置到Vue实例\ncreateApp(App).use(router).mount('#app')\n\n------------------------- src/App.vue -------------------------\n// 4.使用路由\n<template>\n<main>\n    // 4.1.router-link标签的to属性可以改变路由\n    <router-link to=\"/Home\">Home</router-link>\n    <router-link to=\"/Blog\">Blog</router-link>\n    // 4.2.router-view标签可以显示路由组件\n    <router-view />\n</main>\n</template>\n    ",-1),vd=o("点击阅读上一篇"),md=o("点击阅读下一篇"),gd=a("br",null,null,-1),fd=a("br",null,null,-1);ud.render=function(o,r){const i=t("router-link");return l(),n(c,null,[pd,hd,a("h2",null,[e(i,{to:"/Blog825"},{default:d((()=>[vd])),_:1})]),a("h2",null,[e(i,{to:"/Blog827"},{default:d((()=>[md])),_:1})]),gd,fd],64)};const xd={},yd=a("h1",null,"Vue-Router动态路由",-1),wd=a("pre",null,[o("------------------------- src/javascript/router-index.js -------------------------\nimport {createRouter, createWebHistory} from 'vue-router'\n\nimport Home from './views/home.vue'\nimport Blog from './views/blog.vue'\n\nexport default createRouter({\n    history: createWebHistory(),\n    routes: [\n        {path: '/', component: Home,},\n        {path: \"/Home\", component: Home,},\n        // 1.路由规则中设置动态路由\n        {path: \"/Blog/:index\", component: Blog,},\n    ]\n})\n\n------------------------- src/App.vue -------------------------\n<template>\n<main>\n    <router-link to=\"/Home\">Home</router-link>\n    // 2.使用动态路由传递参数\n    <router-link to=\"/Blog/1228\">Blog</router-link>\n    <router-view />\n</main>\n</template>\n\n------------------------- src/views/blog.vue -------------------------\n<template>\n    // 3.路由中使用传递的参数\n    <h1>blog`s index: "),a("span",null,"{{$route.params.index}}"),o("</h1>\n</template>\n\n<\/script>\nexport default {\n    mounted() {\n        // 3.路由中使用传递的参数\n        console.log(this.$route.params.index)\n    }\n}\n<\/script>\n\n    ")],-1),kd=o("点击阅读上一篇"),qd=o("点击阅读下一篇"),Td=a("br",null,null,-1),Bd=a("br",null,null,-1);xd.render=function(o,r){const i=t("router-link");return l(),n(c,null,[yd,wd,a("h2",null,[e(i,{to:"/Blog826"},{default:d((()=>[kd])),_:1})]),a("h2",null,[e(i,{to:"/Blog828"},{default:d((()=>[qd])),_:1})]),Td,Bd],64)};const Cd={},Pd=a("h1",null,"Vue-Router嵌套路由",-1),Sd=a("pre",null,"\n\n    ",-1),Md=o("点击阅读上一篇"),Hd=o("点击阅读下一篇"),_d=a("br",null,null,-1),Nd=a("br",null,null,-1);Cd.render=function(o,r){const i=t("router-link");return l(),n(c,null,[Pd,Sd,a("h2",null,[e(i,{to:"/Blog827"},{default:d((()=>[Md])),_:1})]),a("h2",null,[e(i,{to:"/Blog829"},{default:d((()=>[Hd])),_:1})]),_d,Nd],64)};const Ad={},Id=a("h1",null,"Vuex(931)",-1),Dd=a("hr",null,null,-1),Vd=a("h2",null,"Vuex基本格式",-1),jd=a("pre",null,[o("------------------------- src/store-index.js -------------------------\n// 从Vuex导入createStroe API\nimport {createStore} from 'vuex'\n\nexport default createStore({\n    // state 相当于 Vue组件中的 date\n    state: {\n        myString: 'HelloWorld',\n        myNum: 12,\n    },\n    // mutations 相当于 Vue组件中的 methods\n    mutations: {\n        add(state,num) {\n            state.myNum += num\n        },\n        sub(state,num) {\n            state.myNum -= num\n        },\n    },\n    // getters 相当于 Vue组件中的 computed\n    getters: {\n        squ(state) {\n            return state.myNum * state.myNum\n        }\n    },\n    // actions 用于异步处理\n    actions: {\n        asynAdd(context) {\n            setTimeout(() => {\n                context.commit('add',3)\n            }, 2000);\n        },\n    },\n})\n\n------------------------- src/main.js -------------------------\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport store from './store-index.js'\n\ncreateApp(App).use(store).use(router).mount('#app')\n\n------------------------- src/App.vue -------------------------\n<template>\n<main>\n    <p>"),a("span",null,"{{$store.state.myString}}"),o("</p>\n    <p>"),a("span",null,"{{$store.state.myNum}}"),o("</p>\n    <p>"),a("span",null,"{{$store.getters.squ}}"),o("</p>\n    <button @click=\"$store.commit('sub',3)\">减三</button>\n    <button @click=\"$store.commit('add',5)\">加五</button>\n    <button @click=\"$store.dispatch('asynAdd')\">加三</button>\n</main>\n</template>\n    ")],-1);Ad.render=function(t,e){return l(),n(c,null,[Id,Dd,Vd,jd,a("h2",{onClick:e[0]||(e[0]=n=>t.$router.push("/Blog/90"))},"点击阅读上一篇"),a("h2",{onClick:e[1]||(e[1]=n=>t.$router.push("/Blog/90"))},"点击阅读下一篇")],64)};var Ld=h({history:v(),routes:[{path:"/",component:C},{path:"/Blog",component:C},{path:"/Catalogue",component:ft},{path:"/Calendar",component:yt},{path:"/Timetable/:user",component:qt},{path:"/Blog384",component:Dt},{path:"/Blog385",component:Lt},{path:"/Blog389",component:Wt},{path:"/Blog390",component:Ut},{path:"/Blog401",component:Kt},{path:"/Blog402",component:nn},{path:"/Blog403",component:ln},{path:"/Blog404",component:un},{path:"/Blog405",component:fn},{path:"/Blog406",component:qn},{path:"/Blog407",component:Hn},{path:"/Blog415",component:Gn},{path:"/Blog561",component:Wn},{path:"/Blog600",component:Zn},{path:"/Blog601",component:ta},{path:"/Blog602",component:ea},{path:"/Blog606",component:la},{path:"/Blog617",component:ia},{path:"/Blog621",component:ua},{path:"/Blog622",component:ma},{path:"/Blog623",component:ya},{path:"/Blog624",component:Ta},{path:"/Blog660",component:Sa},{path:"/Blog661",component:_a},{path:"/Blog662",component:Va},{path:"/Blog663",component:Wa},{path:"/Blog664",component:Fa},{path:"/Blog665",component:Ka},{path:"/Blog666",component:ae},{path:"/Blog667",component:oe},{path:"/Blog668",component:ue},{path:"/Blog681",component:me},{path:"/Blog800",component:xe},{path:"/Blog801",component:ke},{path:"/Blog802",component:Be},{path:"/Blog803",component:Se},{path:"/Blog804",component:De},{path:"/Blog805",component:Le},{path:"/Blog806",component:Xe},{path:"/Blog807",component:Ke},{path:"/Blog808",component:cd},{path:"/Blog826",component:ud},{path:"/Blog827",component:xd},{path:"/Blog828",component:Cd},{path:"/Blog831",component:Ad}]});m(g).use(Ld).mount("main");
